{"mappings":"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","sources":["./src/color-sort/index.ts","./src/color-sort/sketch.ts"],"sourcesContent":["import p5 from \"p5\";\n\nimport { setup, updateState, draw, State } from \"./sketch\";\n\nnew p5((sketch) => {\n  let state: State;\n\n  sketch.setup = () => {\n    state = setup(sketch);\n    state.p5 = sketch;\n  };\n\n  sketch.draw = () => {\n    updateState(state);\n    draw(sketch, state);\n  };\n}, document.getElementById(\"p5canvas\")!);\n","import p5 from \"p5\";\n\ndeclare var process: any;\nif (process.env.NODE_ENV === \"production\") {\n  // @ts-ignore\n  p5.disableFriendlyErrors = true;\n}\n\n// declare var require: any;\n// const imageFile: string = require(\"url:./screenshot.png\");\n\nenum SortMethod {\n  Random = 1,\n  RGB,\n  RGBMorton,\n  HSL,\n  HLS,\n  HSLMorton,\n  HLSMorton,\n  HSB,\n  HBS,\n  HSBMorton,\n  HBSMorton,\n}\n\nexport interface State {\n  p5: p5;\n  img?: p5.Image;\n  sel: p5.Element;\n  sorted: boolean;\n  method: SortMethod;\n}\n\nconst X_DIM = window.innerWidth;\nconst Y_DIM = window.innerHeight - 4;\n\nexport function setup(sketch: p5): State {\n  sketch.createCanvas(X_DIM, Y_DIM);\n  sketch.background(64, 64, 64);\n\n  const image = sketch.createImage(X_DIM, Y_DIM);\n  image.loadPixels();\n\n  for (let y = 0; y < image.height; y++) {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n\n    for (let x = 0; x < image.width; x++) {\n      const index = (x + y * image.width) * 4;\n      image.pixels[index] = r;\n      image.pixels[index + 1] = g;\n      image.pixels[index + 2] = b;\n      image.pixels[index + 3] = 255;\n    }\n  }\n  image.updatePixels();\n\n  const sel = sketch.createSelect() as any;\n  sel.position(10, 10);\n\n  const names: { [name: string]: SortMethod } = {\n    Random: SortMethod.Random,\n    RGB: SortMethod.RGB,\n    HSL: SortMethod.HSL,\n    \"HSL (HLS)\": SortMethod.HLS,\n    HSB: SortMethod.HSB,\n    \"HSB (HBS)\": SortMethod.HBS,\n    \"RGB (Morton)\": SortMethod.RGBMorton,\n    \"HSL (Morton)\": SortMethod.HSLMorton,\n    \"HSL (HLS) (Morton)\": SortMethod.HLSMorton,\n    \"HSB (Morton)\": SortMethod.HSBMorton,\n    \"HSB (HBS) (Morton)\": SortMethod.HBSMorton,\n  };\n\n  for (let name of Object.keys(names)) {\n    sel.option(name);\n  }\n\n  // sketch.loadImage(imageFile, (img) => {\n  //   state.img = img;\n  // });\n\n  const state = {\n    p5: sketch,\n    img: image,\n    sel,\n    sorted: false,\n    method: SortMethod.Random,\n  };\n\n  sel.changed(() => {\n    const value = sel.value();\n    state.sorted = false;\n    state.method = names[value];\n    sketch.redraw();\n  });\n\n  return state;\n}\n\nfunction mortonDistance(x: number, y: number, z: number): number {\n  // Assume x is a 10-bit (or less) number (0-1023)\n  // .... .... ..98 7654 3210\n\n  x = (x | (x << 16)) & 0x030000ff;\n  //    ..98 7654 3210 .... ..98 7654 3210\n  // &  0011 0000 0000 0000 0000 1111 1111\n  // -> ..98 .... .... .... .... 7654 3210\n\n  x = (x | (x << 8)) & 0x0300f00f;\n  //    ..98 .... .... 7654 3210 7654 3210\n  // &  0011 0000 0000 1111 0000 0000 1111\n  // -> ..98 .... .... 7654 .... .... 3210\n\n  x = (x | (x << 4)) & 0x030c30c3;\n  //    ..98 .... 7654 7654 .... 3210 3210\n  // &  0011 0000 1100 0011 0000 1100 0011\n  // -> ..98 .... 76.. ..54 .... 32.. ..10\n\n  x = (x | (x << 2)) & 0x09249249;\n  //    9898 ..76 76.. 5454 ..32 32.. 1010\n  // &  1001 0010 0100 1001 0010 0100 1001\n  // -> 9..8 ..7. .6.. 5..4 ..3. .2.. 1..0\n\n  y = (y | (y << 16)) & 0x030000ff;\n  y = (y | (y << 8)) & 0x0300f00f;\n  y = (y | (y << 4)) & 0x030c30c3;\n  y = (y | (y << 2)) & 0x09249249;\n\n  z = (z | (z << 16)) & 0x030000ff;\n  z = (z | (z << 8)) & 0x0300f00f;\n  z = (z | (z << 4)) & 0x030c30c3;\n  z = (z | (z << 2)) & 0x09249249;\n\n  // ..ZY XZYX ZYXZ YXZY XZYX ZYXZ YXZY XZYX\n  return x | (y << 1) | (z << 2);\n}\n\nexport function updateState(state: State): void {\n  const { img, p5 } = state;\n  if (img == null) return;\n\n  if (!state.sorted) {\n    img.loadPixels();\n    console.debug(img.pixels);\n\n    console.debug(\"start\");\n    const start = performance.now();\n    const indices = new Uint32Array(img.width * img.height);\n    const distances = new Uint32Array(img.width * img.height);\n    console.debug(\"allocated\", performance.now() - start);\n    {\n      const cache: { [cacheKey: number]: number } = {};\n      for (let y = 0; y < img.height; y++) {\n        for (let x = 0; x < img.width; x++) {\n          const index = x + y * img.width;\n          const pixelsIndex = index * 4;\n\n          const rgb = [\n            img.pixels[pixelsIndex],\n            img.pixels[pixelsIndex + 1],\n            img.pixels[pixelsIndex + 2],\n          ];\n\n          const cacheKey = (rgb[0] << 16) | (rgb[1] << 8) | (rgb[2] << 0);\n          if (cacheKey in cache) {\n            distances[index] = cache[cacheKey];\n          } else {\n            let distance: number;\n            switch (state.method) {\n              case SortMethod.Random: {\n                distance = Math.floor(Math.random() * 999999999);\n                break;\n              }\n              case SortMethod.RGB: {\n                distance = (rgb[0] << 16) | (rgb[1] << 8) | (rgb[2] << 0);\n                break;\n              }\n              case SortMethod.HSL:\n              case SortMethod.HLS: {\n                const h = p5.map(p5.hue(rgb), 0, 360, 0, 255, true) | 0;\n                const s = p5.map(p5.saturation(rgb), 0, 100, 0, 255, true) | 0;\n                const l = p5.map(p5.lightness(rgb), 0, 100, 0, 255, true) | 0;\n                if (state.method === SortMethod.HSL) {\n                  distance = (h << 16) | (s << 8) | (l << 0);\n                } else {\n                  distance = (h << 16) | (l << 8) | (s << 0);\n                }\n                break;\n              }\n              case SortMethod.HBS:\n              case SortMethod.HSB: {\n                p5.colorMode(p5.HSB);\n                const h = p5.map(p5.hue(rgb), 0, 360, 0, 255, true) | 0;\n                const s = p5.map(p5.saturation(rgb), 0, 100, 0, 255, true) | 0;\n                const b = p5.map(p5.brightness(rgb), 0, 100, 0, 255, true) | 0;\n                distance = (h << 16) | (s << 8) | (b << 0);\n                if (state.method === SortMethod.HSB) {\n                  distance = (h << 16) | (s << 8) | (b << 0);\n                } else {\n                  distance = (h << 16) | (b << 8) | (s << 0);\n                }\n                p5.colorMode(p5.RGB);\n                break;\n              }\n              case SortMethod.RGBMorton: {\n                distance = mortonDistance(rgb[2], rgb[1], rgb[0]);\n                break;\n              }\n              case SortMethod.HSLMorton:\n              case SortMethod.HLSMorton: {\n                const h = p5.map(p5.hue(rgb), 0, 360, 0, 255, true) | 0;\n                const s = p5.map(p5.saturation(rgb), 0, 100, 0, 255, true) | 0;\n                const l = p5.map(p5.lightness(rgb), 0, 100, 0, 255, true) | 0;\n                if (state.method === SortMethod.HSLMorton) {\n                  distance = mortonDistance(l, s, h);\n                } else {\n                  distance = mortonDistance(s, l, h);\n                }\n\n                break;\n              }\n              case SortMethod.HBSMorton:\n              case SortMethod.HSBMorton: {\n                p5.colorMode(p5.HSB);\n                const h = p5.map(p5.hue(rgb), 0, 360, 0, 255, true) | 0;\n                const s = p5.map(p5.saturation(rgb), 0, 100, 0, 255, true) | 0;\n                const b = p5.map(p5.brightness(rgb), 0, 100, 0, 255, true) | 0;\n                if (state.method === SortMethod.HSBMorton) {\n                  distance = mortonDistance(b, s, h);\n                } else {\n                  distance = mortonDistance(s, b, h);\n                }\n                p5.colorMode(p5.RGB);\n                break;\n              }\n            }\n\n            cache[cacheKey] = distances[index] = distance;\n          }\n          indices[index] = index;\n        }\n      }\n    }\n    console.debug(\"calculated\", performance.now() - start);\n    const pixelCopy = Uint8Array.from(img.pixels);\n    console.debug(\"copied\", performance.now() - start);\n    indices.sort((indexA, indexB) => distances[indexA] - distances[indexB]);\n    console.debug(\"wow sorted\", performance.now() - start);\n\n    for (let index = 0; index < indices.length; index++) {\n      const copyIndex = indices[index];\n      const pixelsIndex = index * 4;\n      const pixelCopyIndex = copyIndex * 4;\n\n      img.pixels[pixelsIndex] = pixelCopy[pixelCopyIndex];\n      img.pixels[pixelsIndex + 1] = pixelCopy[pixelCopyIndex + 1];\n      img.pixels[pixelsIndex + 2] = pixelCopy[pixelCopyIndex + 2];\n      img.pixels[pixelsIndex + 3] = pixelCopy[pixelCopyIndex + 3];\n    }\n    console.debug(\"set\", performance.now() - start);\n    img.updatePixels();\n    state.sorted = true;\n  }\n}\n\nexport function draw(sketch: p5, state: State) {\n  if (state.img == null) return;\n  sketch.image(state.img, 0, 0);\n  if (state.method === SortMethod.Random) {\n    sketch.fill(\"white\");\n    sketch.stroke(\"black\");\n    sketch.strokeWeight(8);\n    sketch.textSize(24);\n    sketch.text(\n      `Colors are a three-dimensional space.\nWhat does it mean to \"sort\" them, into a one-dimensional list?\nHere's a comparison of sorting in several different color spaces.`,\n      10,\n      80\n    );\n  }\n  sketch.noLoop();\n}\n"],"names":["_p","require","_sketch","p5","sketch","state","setup","draw","updateState","document","getElementById","SortMethod","createCanvas","X_DIM","Y_DIM","background","image","createImage","loadPixels","y","height","r","Math","floor","random","g","b","x","width","index","pixels","updatePixels","sel","createSelect","position","names","Random","RGB","HSL","HSL (HLS)","HLS","HSB","HSB (HBS)","HBS","RGB (Morton)","RGBMorton","HSL (Morton)","HSLMorton","HSL (HLS) (Morton)","HLSMorton","HSB (Morton)","HSBMorton","HSB (HBS) (Morton)","HBSMorton","name","Object","keys","option","img","sorted","method","changed","value","redraw","console","debug","start","performance","now","indices","Uint32Array","distances","cache","pixelsIndex","rgb","cacheKey","distance","h","map","hue","s","saturation","l","lightness","colorMode","brightness","mortonDistance","pixelCopy","Uint8Array","from","sort","indexA","indexB","length","copyIndex","pixelCopyIndex","fill","stroke","strokeWeight","textSize","text","noLoop","disableFriendlyErrors","window","innerWidth","innerHeight","z"],"version":3,"file":"index.3a441737.js.map"}