{"mappings":"4pCAAA,MAAAA,KAAAC,EAAA,mCAEAC,EAAAD,EAAA,YAEA,IAAIE,EAAAA,QAAIC,IACN,IAAIC,EAEJD,EAAOE,MAAQ,KACbD,GAAQ,EAAAH,EAAAI,OAAMF,GACdC,EAAMF,GAAKC,GAGbA,EAAOG,KAAO,KACZF,GAAQ,EAAAH,EAAAM,aAAYH,IACpB,EAAAH,EAAAK,MAAKH,EAAQC,KAEdI,SAASC,eAAe,8ICGpB,SAAeN,GAIpB,OAHAA,EAAOO,aAVK,IACA,KAUZP,EAAOQ,WAAW,IAAK,IAAK,KAErB,CACLT,GAAIC,EACJS,aAAcC,EAAOC,KAAeC,IAAKC,GAAM,GAC/CC,EAZU,kBAgBP,SAAqBb,GAC1B,OAAOA,UAqBF,SAAcD,EAAYC,GAC/B,IAAIa,EAAEA,EAAFL,aAAKA,GAAiBR,EAG1B,CACE,MAAMc,EAnBV,SAAmBd,GACjB,MAAMe,EAAWf,EAAMF,GAAGkB,QAAQ,GAAI,IAEtC,OADiBhB,EAAMF,GAAGmB,QAAQF,GAiBlBG,CAAUlB,GAClBmB,EAdV,SAAoBnB,GAClB,OAAOA,EAAMF,GAAGkB,OAAO,GAAI,KAaVI,CAAWpB,GAC1BD,EAAOoB,OAAOA,GAEd,IAAIE,EAAK,EACT,KAAOA,EAAKX,KAAe,CACzB,MAAMY,EAAKd,EAAaa,GAClBE,EA/CEC,IA+CYF,EAEdG,EAAKF,EAAMG,KAAKC,IAAIb,GAASO,EAEnCtB,EAAO6B,aAAa7B,EAAO8B,eAAe,EAAG,KAC7C9B,EAAO+B,KAAKT,EAxDJ,EAwDgBC,EAAIG,EAAIH,EAAKC,GACrCF,GAAMK,KAAKK,MAAMhC,EAAOiB,OAAO,EAAG,KAItC,IAAIgB,EAAwB,GAE5B,GADAA,EAAYC,KAAKpB,GACbA,GA3DQW,IA4DVzB,EAAOmC,aACF,CACL,MAAMC,EA7CV,SAAkBnC,GAChB,OAAOA,EAAMF,GAAG+B,eAAe,GAAI,IA4CpBO,CAASpC,GAGtB,IAAIqC,EAAI,EACR,KAAOA,EAAI3B,KAAe,CACxB,IAAI4B,EAAgBN,EAAYK,EAAI,GAAKtC,EAAOiB,QAAQ,EAAG,GAC3DsB,EAAgBZ,KAAKa,IAAID,EAAe9B,EAAa6B,IACrDC,EAAgBZ,KAAKc,IAAIF,EArEjBd,KAsERQ,EAAYC,KAAKK,GAEjBD,GAAK,EAEPtC,EAAO0C,KAAK,IAAK,IAAK,KACtB1C,EAAOoB,OAAO,IAAK,IAAK,KACxBpB,EAAO6B,aAAa,GACpB7B,EAAO2C,aAEP3C,EAAO4C,OAnFG,EAmFW9B,GACrBmB,EAAYY,QAAQ,CAACtB,EAAID,KACvBtB,EAAO8C,YArFC,EAqFmBxB,EAAIC,KAEjCvB,EAAO4C,OApFGG,IACAtB,KAoFVzB,EAAO4C,OAxFG,EAIAnB,KAqFVzB,EAAO4C,OAzFG,EAyFW9B,GACrBd,EAAOgD,WAGP/C,EAAMQ,aAAewB,EACrBhC,EAAMa,GAAKsB,EAWb,OAPApC,EAAOiD,WACPjD,EAAO0C,KAAK,IAAK,IAAK,KACtB1C,EAAOkD,KApGK,EACA,EAEAH,IARO,IA0GnB/C,EAAOkD,KArGK,EACA,EANO,GASPzB,KAkGZzB,EAAOkD,KAtGK,EAsGOC,IAnGPJ,IARO,IA4GnB/C,EAAOkD,KAAKvC,IAtGA,EANO,GASPc,KAqGLxB,GAtET,SAASS,EAAO0C,GACd,MAAO,IAAIC,MAAMD,GAAGE","sources":["./src/mountains/index.ts","./src/mountains/sketch.ts"],"sourcesContent":["import p5 from \"p5\";\n\nimport { setup, updateState, draw, State } from \"./sketch\";\n\nnew p5((sketch) => {\n  let state: State;\n\n  sketch.setup = () => {\n    state = setup(sketch);\n    state.p5 = sketch;\n  };\n\n  sketch.draw = () => {\n    state = updateState(state);\n    draw(sketch, state);\n  };\n}, document.getElementById(\"p5canvas\")!);\n","import p5 from \"p5\";\n\nexport interface State {\n  p5: p5;\n  previousWalk: number[];\n  y: number;\n}\n\nconst BORDER_WIDTH = 40;\n\nconst X_DIM = 800;\nconst Y_DIM = 800;\n\nconst X_MIN = 0;\nconst Y_MIN = 0;\n\nconst X_MAX = X_DIM;\nconst Y_MAX = Y_DIM;\n\nexport function setup(sketch: p5): State {\n  sketch.createCanvas(X_DIM, Y_DIM);\n  sketch.background(238, 232, 220);\n\n  return {\n    p5: sketch,\n    previousWalk: rangeN(X_MAX - X_MIN).map((_) => 0),\n    y: Y_MIN,\n  };\n}\n\nexport function updateState(state: State): State {\n  return state;\n}\n\nfunction randJump(state: State) {\n  return state.p5.randomGaussian(50, 20);\n}\n\nfunction randAngle(state: State) {\n  const angleDeg = state.p5.random(-15, 15);\n  const angleRad = state.p5.radians(angleDeg);\n  return angleRad;\n}\n\nfunction randStroke(state: State) {\n  return state.p5.random(64, 196);\n}\n\nfunction rangeN(n: number) {\n  return [...Array(n).keys()];\n}\n\nexport function draw(sketch: p5, state: State) {\n  let { y, previousWalk } = state;\n\n  // Vertical lines\n  {\n    const angle = randAngle(state);\n    const stroke = randStroke(state);\n    sketch.stroke(stroke);\n\n    let x1 = 0;\n    while (x1 < X_MAX - X_MIN) {\n      const y1 = previousWalk[x1];\n      const d_y = Y_MAX - y1;\n      // Trigonometry to find intercept\n      const x2 = d_y * Math.tan(angle) + x1;\n\n      sketch.strokeWeight(sketch.randomGaussian(2, 0.5));\n      sketch.line(x1 + X_MIN, y1, x2, y1 + d_y);\n      x1 += Math.round(sketch.random(3, 7));\n    }\n  }\n\n  let currentWalk: number[] = [];\n  currentWalk.push(y);\n  if (y >= Y_MAX) {\n    sketch.noLoop();\n  } else {\n    const jump = randJump(state);\n\n    // Perform random walk\n    let x = 1;\n    while (x < X_MAX - X_MIN) {\n      let nextWalkValue = currentWalk[x - 1] + sketch.random(-3, 3);\n      nextWalkValue = Math.max(nextWalkValue, previousWalk[x]);\n      nextWalkValue = Math.min(nextWalkValue, Y_MAX);\n      currentWalk.push(nextWalkValue);\n\n      x += 1;\n    }\n    sketch.fill(238, 232, 220);\n    sketch.stroke(238, 232, 220);\n    sketch.strokeWeight(6);\n    sketch.beginShape();\n\n    sketch.vertex(X_MIN, y);\n    currentWalk.forEach((y1, x1) => {\n      sketch.curveVertex(X_MIN + x1, y1);\n    });\n    sketch.vertex(X_MAX, Y_MAX);\n    sketch.vertex(X_MIN, Y_MAX);\n    sketch.vertex(X_MIN, y);\n    sketch.endShape();\n\n    // Update state; maybe figure out later why it don't walk so good\n    state.previousWalk = currentWalk;\n    state.y += jump;\n  }\n\n  // Draw border\n  sketch.noStroke();\n  sketch.fill(238, 232, 220);\n  sketch.rect(X_MIN, Y_MIN, X_MAX, BORDER_WIDTH);\n  sketch.rect(X_MIN, Y_MIN, BORDER_WIDTH, Y_MAX);\n  sketch.rect(X_MIN, Y_MAX - BORDER_WIDTH, X_MAX, BORDER_WIDTH);\n  sketch.rect(X_MAX - BORDER_WIDTH, Y_MIN, BORDER_WIDTH, Y_MAX);\n\n  return state;\n}\n"],"names":["_p","require","_sketch","p5","sketch","state","setup","draw","updateState","document","getElementById","createCanvas","background","previousWalk","rangeN","X_MAX","map","_","y","angle","angleDeg","random","radians","randAngle","stroke","randStroke","x1","y1","d_y","Y_DIM","x2","Math","tan","strokeWeight","randomGaussian","line","round","currentWalk","push","noLoop","jump","randJump","x","nextWalkValue","max","min","fill","beginShape","vertex","forEach","curveVertex","X_DIM","endShape","noStroke","rect","Y_MAX","n","Array","keys"],"version":3,"file":"index.9f1ff152.js.map"}