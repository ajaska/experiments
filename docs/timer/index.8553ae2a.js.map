{"mappings":"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","sources":["./node_modules/@parcel/runtime-js/lib/JSRuntime.js","./node_modules/@parcel/runtime-js/lib/bundle-manifest.js","./src/timer/index.tsx","./node_modules/@parcel/runtime-js/lib/bundle-url.js","./node_modules/@parcel/runtime-js/lib/relative-path.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = require(\"@parcel/plugin\");\n\nvar _utils = require(\"@parcel/utils\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n};\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new _plugin.Runtime({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        // If this bundle already has the asset this dependency references,\n        // return a simple runtime of `Promise.resolve(require(\"path/to/asset\"))`.\n        assets.push({\n          filePath: _path.default.join(options.projectRoot, 'JSRuntime.js'),\n          // Using Promise['resolve'] to prevent Parcel from inferring this is an async dependency.\n          // TODO: Find a better way of doing this.\n          code: `module.exports = Promise['resolve'](require(${JSON.stringify('./' + _path.default.relative(options.projectRoot, resolved.value.filePath))}))`,\n          dependency\n        });\n      } else {\n        assets.push(...getLoaderRuntimes({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        }));\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      // Resolve the dependency to a bundle. If inline, export the dependency id,\n      // which will be replaced with the contents of that bundle later.\n      let referencedBundle = bundleGraph.getReferencedBundle(dependency, bundle);\n\n      if (referencedBundle === null || referencedBundle === void 0 ? void 0 : referencedBundle.isInline) {\n        assets.push({\n          filePath: _path.default.join(__dirname, `/bundles/${referencedBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // Otherwise, try to resolve the dependency to an external bundle group\n      // and insert a URL to that bundle.\n\n\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows.default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let entries = b.getEntryAssets();\n        return entries.some(e => bundleGroup.entryAssetId === e.id);\n      }));\n\n      if (bundle.env.outputFormat === 'commonjs') {\n        assets.push({\n          filePath: __filename,\n          dependency,\n          code: `module.exports = require(\"./\" + ${getRelativePathExpr(bundle, mainBundle)})`\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntimes({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let assets = []; // Sort so the bundles containing the entry asset appear last\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline).sort(bundle => bundle.getEntryAssets().map(asset => asset.id).includes(bundleGroup.entryAssetId) ? 1 : -1); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = externalBundles.slice(-1);\n  }\n\n  let loaders = getLoaders(bundle.env); // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = loaders ? externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows.default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean) : [];\n\n  if (loaderModules.length > 0) {\n    let loaders = loaderModules.join(', ');\n\n    if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n      loaders = `Promise.all([${loaders}])`;\n\n      if (bundle.env.outputFormat !== 'global') {\n        loaders += `.then(r => r[r.length - 1])`;\n      }\n    } else {\n      loaders = `(${loaders})`;\n    }\n\n    if (bundle.env.outputFormat === 'global') {\n      loaders += `.then(() => parcelRequire('${bundleGraph.getAssetPublicId(bundleGraph.getAssetById(bundleGroup.entryAssetId))}')${// In global output with scope hoisting, functions return exports are\n      // always returned. Otherwise, the exports are returned.\n      bundle.env.scopeHoist ? '()' : ''})`;\n    }\n\n    assets.push({\n      filePath: __filename,\n      code: `module.exports = ${loaders};`,\n      dependency\n    });\n  }\n\n  return assets;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  let parents = bundleGraph.getParentBundles(bundle);\n  return bundle.isEntry || parents.length === 0 || parents.some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[bundle.publicId] = (0, _nullthrows.default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(from.publicId)}, ${JSON.stringify(to.publicId)})`;\n  }\n\n  return JSON.stringify((0, _utils.relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\ndeclare var require: any;\nconst audioFile: string = require(\"url:./chime.mp3\");\nnew Audio(audioFile); // Preload\n\nconst playAudio = async () => {\n  const audio = new Audio(audioFile);\n  audio.volume = 0.2;\n  audio.play();\n};\n\nconst svgSize = 400;\nconst radius = 180;\nconst circumference = 2 * Math.PI * radius;\n\n// Yoinked from:\n// https://css-tricks.com/using-requestanimationframe-with-react-hooks/\nconst useAnimationFrame = (\n  callback: (deltaTime: number) => void,\n  depends: any[]\n) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<DOMHighResTimeStamp>();\n  const previousTimeRef = React.useRef<DOMHighResTimeStamp>();\n\n  const animate = (time: DOMHighResTimeStamp) => {\n    if (previousTimeRef.current != null) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (requestRef.current != null) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, depends); // Make sure the effect runs only once\n};\n\n// const Counter = () => {\n//   const [count, setCount] = React.useState(0);\n//\n//   useAnimationFrame((deltaTime) => {\n//     // Pass on a function to the setter of the state\n//     // to make sure we always have the latest state\n//     setCount((prevCount) => (prevCount + deltaTime * 0.01) % 100);\n//   });\n//\n//   return <div>{Math.round(count)}</div>;\n// };\n\nenum TimerState {\n  Stopped = 1,\n  Running,\n  Paused,\n}\n\nfunction formatTime(time: number): string {\n  const minutes = Math.floor(time / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.floor(time % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n\nconst App = () => {\n  const [timerDuration] = React.useState(25 * 60);\n  const [remainingTime, setRemainingTime] = React.useState(timerDuration);\n  const [timerState, setTimerState] = React.useState(TimerState.Stopped);\n\n  useAnimationFrame(\n    (deltaTime: number) => {\n      if (timerState === TimerState.Running) {\n        setRemainingTime((remainingTime) => {\n          const newRemainingTime = remainingTime - deltaTime / 1000.0;\n          if (newRemainingTime <= 0) {\n            setTimerState(TimerState.Stopped);\n            playAudio();\n            return timerDuration;\n          }\n          return newRemainingTime;\n        });\n      }\n    },\n    [timerState, timerDuration]\n  );\n\n  // Experiments to determine accuracy of requestAnimationFrame timing;\n  // It's pretty good. Roughly offset by ~50 ms and doesn't skew.\n  // const [firstRender] = React.useState(performance.now());\n  // const elapsed = (performance.now() - firstRender) / 1000;\n  // const drift = elapsed - remainingTime;\n  // console.debug(`Animation is off by: ${(drift * 1000).toFixed(2)}ms`);\n\n  const TimerButtons = React.useMemo(\n    () => (props: { state: TimerState }) => {\n      switch (props.state) {\n        case TimerState.Stopped: {\n          return (\n            <>\n              <button disabled={true}>Cancel</button>\n              <button onClick={() => setTimerState(TimerState.Running)}>\n                Start\n              </button>\n            </>\n          );\n        }\n        case TimerState.Paused: {\n          return (\n            <>\n              <button\n                onClick={() => {\n                  setTimerState(TimerState.Stopped);\n                  setRemainingTime(timerDuration);\n                }}\n              >\n                Cancel\n              </button>\n              <button onClick={() => setTimerState(TimerState.Running)}>\n                Start\n              </button>\n            </>\n          );\n        }\n        case TimerState.Running: {\n          return (\n            <>\n              <button\n                onClick={() => {\n                  setTimerState(TimerState.Stopped);\n                  setRemainingTime(timerDuration);\n                }}\n              >\n                Cancel\n              </button>\n              <button onClick={() => setTimerState(TimerState.Paused)}>\n                Pause\n              </button>\n            </>\n          );\n        }\n      }\n    },\n    [timerState]\n  );\n\n  return (\n    <div className=\"container\">\n      <TimerButtons state={timerState} />\n      <svg height={svgSize} width={svgSize}>\n        <circle\n          className=\"svg-circle base\"\n          cx={svgSize / 2}\n          cy={svgSize / 2}\n          r={radius}\n        />\n        <circle\n          className=\"svg-circle timer\"\n          cx={svgSize / 2}\n          cy={svgSize / 2}\n          r={radius}\n          strokeDasharray={circumference}\n          strokeDashoffset={circumference * (1 - remainingTime / timerDuration)}\n        />\n        <text\n          className=\"svg-text\"\n          x={svgSize / 2}\n          y={svgSize / 2}\n          textAnchor=\"middle\"\n        >\n          {formatTime(remainingTime)}\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"react\"!));\n","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar resolve = require('./bundle-manifest').resolve;\n\nmodule.exports = function (fromId, toId) {\n  return relative(dirname(resolve(fromId)), resolve(toId));\n};\n\nfunction dirname(_filePath) {\n  if (_filePath === '') {\n    return '.';\n  }\n\n  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;\n  var slashIndex = filePath.lastIndexOf('/');\n  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);\n}\n\nfunction relative(from, to) {\n  if (from === to) {\n    return '';\n  }\n\n  var fromParts = from.split('/');\n\n  if (fromParts[0] === '.') {\n    fromParts.shift();\n  }\n\n  var toParts = to.split('/');\n\n  if (toParts[0] === '.') {\n    toParts.shift();\n  } // Find where path segments diverge.\n\n\n  var i;\n  var divergeIndex;\n\n  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      divergeIndex = i;\n    }\n  } // If there are segments from \"from\" beyond the point of divergence,\n  // return back up the path to that point using \"..\".\n\n\n  var parts = [];\n\n  for (i = 0; i < fromParts.length - divergeIndex; i++) {\n    parts.push('..');\n  } // If there are segments from \"to\" beyond the point of divergence,\n  // continue using the remaining segments.\n\n\n  if (toParts.length > divergeIndex) {\n    parts.push.apply(parts, toParts.slice(divergeIndex));\n  }\n\n  return parts.join('/');\n}\n\nmodule.exports._dirname = dirname;\nmodule.exports._relative = relative;"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","id","resolved","Error","React","_interopRequireWildcard","ReactDOM","audioFile","Audio","circumference","Math","PI","TimerState","App","timerDuration","useState","remainingTime","setRemainingTime","timerState","setTimerState","Stopped","callback","depends","requestRef","useRef","previousTimeRef","animate","time","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","useAnimationFrame","Running","newRemainingTime","async","audio","volume","play","playAudio","TimerButtons","useMemo","props","state","createElement","Fragment","disabled","onClick","Paused","className","height","width","cx","svgSize","cy","r","strokeDasharray","strokeDashoffset","x","y","textAnchor","floor","toString","padStart","render","document","getElementById","getBundleURL","bundleURL","getBaseURL","url","replace","err","matches","stack","match","resolve","dirname","_filePath","filePath","slice","slashIndex","lastIndexOf","relative","from","to","fromParts","split","shift","divergeIndex","toParts","parts","push","apply","join","fromId","toId","_dirname"],"version":3,"file":"index.8553ae2a.js.map"}