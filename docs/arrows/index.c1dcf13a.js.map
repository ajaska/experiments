{"mappings":"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","sources":["./src/arrows/index.ts","./src/arrows/sketch.ts","./src/arrows/Vector.ts"],"sourcesContent":["import p5 from \"p5\";\n\nimport { setup, updateState, draw, State } from \"./sketch\";\n\nnew p5((sketch) => {\n  let state: State;\n\n  sketch.setup = () => {\n    state = setup(sketch);\n    state.p5 = sketch;\n  };\n\n  sketch.draw = () => {\n    state = updateState(state);\n    draw(sketch, state);\n  };\n}, document.getElementById(\"p5canvas\")!);\n","import p5 from \"p5\";\n\nimport { Vector, Point } from \"./Vector\";\n\ninterface Boid {\n  id: number;\n\n  p: Point;\n  v: Vector;\n}\n\nexport interface State {\n  boids: Boid[];\n\n  p5: p5;\n}\n\nenum GoalType {\n  Point = 1,\n  Velocity,\n  Acceleration,\n}\n\ninterface SeekPoint {\n  type: GoalType.Point;\n  goal: Point;\n}\n\ninterface MatchVelocity {\n  type: GoalType.Velocity;\n  goal: Vector;\n}\n\ninterface ApplyForce {\n  type: GoalType.Acceleration;\n  goal: Vector;\n}\n\ntype Goal = SeekPoint | MatchVelocity | ApplyForce | null;\n\nconst FLOCK_THRESHOLD = 50;\nconst SEPARATION_THRESHOLD = 25;\n\nconst MAX_SPEED = 3;\nconst MAX_ACCEL = 0.05;\n// 5 degrees\nlet MAX_TURN_SPEED = Math.PI / 36;\n\nconst X_DIM = 800;\nconst Y_DIM = 800;\nconst FRAME_RATE = 60;\n\nexport function setup(sketch: p5): State {\n  const RANDOM_SEED = 3;\n  const NUM_BOIDS = 200;\n\n  sketch.createCanvas(X_DIM, Y_DIM);\n  sketch.frameRate(FRAME_RATE);\n\n  sketch.randomSeed(RANDOM_SEED);\n  const boids: Boid[] = [];\n  // Old-school for-loop wow\n  for (let i = 0; i < NUM_BOIDS; i++) {\n    boids.push({\n      id: i,\n      p: new Point(sketch.random(0, X_DIM), sketch.random(0, Y_DIM)),\n      v: new Vector(sketch.random(0, 1), sketch.random(0, 2 * Math.PI)),\n    });\n  }\n\n  return { boids, p5: undefined } as any;\n}\n\n// Cohesion\n// Return: a vector with your new desired velocity\nfunction flyToCenterOfFlock(_boid: Boid, flock: Boid[]): Goal {\n  const flockCenter = Point.averageOfPoints(flock.map((f) => f.p));\n  return { type: GoalType.Point, goal: flockCenter };\n}\n\n// Separation\nfunction maintainDistance(boid: Boid, flock: Boid[]): Goal {\n  let vectors = [];\n\n  for (const flockMate of flock) {\n    // This is the direction away from the neighbor\n    let direction = flockMate.p.toPoint(boid.p);\n\n    const distance = direction.length();\n    if (distance > 0 && distance < SEPARATION_THRESHOLD) {\n      // The closer they are, the more we need to avoid them.\n      direction = direction.unit().divide(distance);\n      vectors.push(direction);\n    }\n  }\n\n  // If no one else is around, keep on keeping on\n  if (vectors.length === 0) return null;\n\n  return {\n    type: GoalType.Acceleration,\n    goal: Vector.sumVectors(vectors)\n      .divide(vectors.length)\n      .unit()\n      .multiply(MAX_ACCEL / 1.5),\n  };\n}\n\n// Alignment\nfunction matchVelocity(_boid: Boid, flock: Boid[]): Goal {\n  const flockVelocity = Vector.sumVectors(flock.map((f) => f.v)).divide(\n    flock.length\n  );\n\n  return { type: GoalType.Velocity, goal: flockVelocity };\n}\n\nconst center = new Point(X_DIM / 2, Y_DIM / 2);\nfunction stayInBounds(boid: Boid): Goal {\n  const threshold = X_DIM / 4;\n  const distance = center.distance(boid.p);\n  if (distance > threshold) {\n    const direction = boid.p.toPoint(center).unit();\n    const maxForceAt = X_DIM * (3 / 8);\n    const lerped = (distance - threshold) / (maxForceAt - threshold);\n    const scaled = direction.multiply(lerped).multiply(MAX_ACCEL);\n\n    return { type: GoalType.Acceleration, goal: scaled };\n  }\n  return null;\n}\n\nfunction forceInBounds(point: Point): Point {\n  const direction = center.toPoint(point);\n  if (direction.length() > X_DIM / 2) {\n    return center.add(direction.limit(X_DIM / 2));\n  }\n  return point;\n}\n\n// Return: a vector with your new desired velocity\nfunction moveTowardsMouse(mouse: Point, boid: Boid): Goal {\n  if (mouse.x > 0 && mouse.x < X_DIM && mouse.y > 0 && mouse.y < Y_DIM) {\n    const vector = boid.p.toPoint(mouse);\n    if (vector.length() < X_DIM / 6) {\n      return { type: GoalType.Point, goal: mouse };\n    }\n  }\n  return null;\n}\n\nconst MAX_ANGLE_DIFF = (Math.PI * 3) / 4;\nconst PI_2 = 2 * Math.PI;\nfunction isNeighbor(boid: Boid, otherBoid: Boid): boolean {\n  const vector = boid.p.toPoint(otherBoid.p);\n  if (vector.length() > FLOCK_THRESHOLD) return false;\n\n  const angleDiff = normAngle(vector.angle() - boid.v.angle());\n  return Math.abs(angleDiff) < MAX_ANGLE_DIFF;\n}\n\nfunction normAngle(theta: number) {\n  while (theta > Math.PI) theta -= PI_2;\n  while (theta < -Math.PI) theta += PI_2;\n  return theta;\n}\n\n// Compute change in vector\nfunction computeSteer(boid: Boid, desired: Goal) {\n  if (desired == null) {\n    return new Vector(0, 0);\n  }\n\n  let acceleration: Vector;\n  if (desired.type === GoalType.Point || desired.type === GoalType.Velocity) {\n    let velocity: Vector;\n    if (desired.type === GoalType.Point) {\n      velocity = boid.p.toPoint(desired.goal);\n\n      velocity = velocity.unit().multiply(MAX_SPEED);\n    } else {\n      velocity = desired.goal;\n\n      // Should this be here?\n      velocity = velocity.limit(MAX_SPEED);\n    }\n    acceleration = Vector.sumVectors([velocity, boid.v.multiply(-1)]);\n  } else {\n    acceleration = desired.goal;\n  }\n\n  return acceleration.limit(MAX_ACCEL);\n}\n\nfunction newBoidVector(boid: Boid, state: State): Vector {\n  const flock = state.boids\n    .filter((someBoid) => boid.id !== someBoid.id)\n    .filter((someBoid) => isNeighbor(boid, someBoid));\n\n  let vectors: Vector[] = [\n    computeSteer(boid, stayInBounds(boid)).multiply(2),\n\n    // Use all boids; boids can sense behind them, for proximity\n    computeSteer(boid, maintainDistance(boid, state.boids)).multiply(3),\n\n    // Make boids go slightly faster when possible\n    computeSteer(boid, {\n      type: GoalType.Acceleration,\n      goal: new Vector(MAX_ACCEL / 100, boid.v.theta),\n    }),\n  ];\n\n  const mouse = new Point(state.p5.mouseX, state.p5.mouseY);\n  if (mouse.x > 0 && mouse.x < X_DIM && mouse.y > 0 && mouse.y < Y_DIM) {\n    vectors.push(\n      computeSteer(boid, moveTowardsMouse(mouse, boid)).multiply(-2.4)\n    );\n  }\n\n  if (flock.length > 0) {\n    vectors = [\n      ...vectors,\n      computeSteer(boid, flyToCenterOfFlock(boid, flock)).multiply(0.8),\n      computeSteer(boid, matchVelocity(boid, flock)),\n    ];\n  }\n\n  // Sum vectors\n  return Vector.sumVectors(vectors);\n}\n\nfunction limitMaxTurnSpeed(boid: Boid, newV: Vector): Vector {\n  // Limit max turn speed\n  let dAngle = normAngle(newV.angle() - boid.v.angle());\n  let theta = newV.theta;\n  if (dAngle > MAX_TURN_SPEED) {\n    theta = normAngle(boid.v.angle() + MAX_TURN_SPEED);\n    return new Vector(newV.r, theta);\n  }\n  if (dAngle < -MAX_TURN_SPEED) {\n    theta = normAngle(boid.v.angle() - MAX_TURN_SPEED);\n    return new Vector(newV.r, theta);\n  }\n  return newV;\n}\n\nexport function updateState(state: State): State {\n  return {\n    ...state,\n    boids: state.boids.map((boid) => {\n      const dv = newBoidVector(boid, state);\n      let v = Vector.sumVectors([boid.v, dv]).limit(MAX_SPEED);\n      v = limitMaxTurnSpeed(boid, v);\n\n      let p = boid.p.add(v);\n      p = forceInBounds(p);\n\n      return {\n        ...boid,\n        p,\n        v,\n      };\n    }),\n  };\n}\n\nconst scale = (-SEPARATION_THRESHOLD / 4) * 1.5;\nfunction drawBoid(sketch: p5, boid: Boid) {\n  const theta = boid.v.angle() - sketch.radians(90);\n\n  {\n    sketch.push();\n    sketch.translate(boid.p.x, boid.p.y);\n    sketch.rotate(theta);\n\n    {\n      sketch.beginShape();\n      // Top\n      sketch.vertex(0, -scale);\n      // Left\n      sketch.vertex(-scale / 2, scale);\n      // Right\n      sketch.vertex(scale / 2, scale);\n      sketch.endShape(sketch.CLOSE);\n    }\n    sketch.pop();\n  }\n}\n\nexport function draw(sketch: p5, state: State) {\n  sketch.background(255);\n  sketch.fill(220);\n  sketch.circle(X_DIM / 2, Y_DIM / 2, Math.max(X_DIM, Y_DIM));\n\n  sketch.fill(255, 0, 0);\n  sketch.circle(sketch.mouseX, sketch.mouseY, 4);\n\n  const color = sketch.color(\n    `hsb(${(3 * sketch.frameCount) % 360}, 100%, ${Math.floor(\n      100\n      // (speed / MAX_SPEED) * 100\n    )}%)`\n  );\n  sketch.fill(color);\n  sketch.stroke(64);\n\n  for (const boid of state.boids) {\n    drawBoid(sketch, boid);\n  }\n\n  return state;\n}\n","// Based off of https://github.com/evanw/lightgl.js/blob/master/src/vector.js\n\nconst sumR = (total: number, current: number) => total + current;\n\nexport class Point {\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(x: number, y: number, z?: number) {\n    if (isNaN(x) || isNaN(y) || isNaN(z || 0)) {\n      throw new Error(\"Point cannot have NaN\");\n    }\n\n    this.x = x;\n    this.y = y;\n    // this.z = z || 0;\n    this.z = 0;\n  }\n\n  static averageOfPoints(points: Point[]) {\n    const avgX = points.map((p) => p.x).reduce(sumR, 0) / points.length;\n    const avgY = points.map((p) => p.y).reduce(sumR, 0) / points.length;\n    const avgZ = points.map((p) => p.z).reduce(sumR, 0) / points.length;\n\n    return new Point(avgX, avgY, avgZ);\n  }\n\n  toPoint(p: Point): Vector {\n    const x = p.x - this.x;\n    const y = p.y - this.y;\n    return new Vector(Math.sqrt(x * x + y * y), Math.atan2(y, x));\n  }\n\n  add(v: Vector): Point {\n    return new Point(\n      this.x + v.r * Math.cos(v.theta),\n      this.y + v.r * Math.sin(v.theta)\n    );\n  }\n\n  // toPoint(p: Point): Vector {\n  //   // return new Vector(p.x - this.x, p.y - this.y, p.z - this.z);\n  //   return new Vector(p.x - this.x, p.y - this.y, p.z - this.z);\n  // }\n\n  // add(v: Vector) {\n  //   return new Point(this.x + v.x, this.y + v.y, this.z + v.z);\n  // }\n\n  distance(p: Point): number {\n    return this.toPoint(p).length();\n  }\n}\n\nexport class Vector {\n  r: number;\n  theta: number;\n\n  constructor(r: number, theta: number) {\n    this.r = r;\n\n    while (theta > Math.PI) theta -= Math.PI * 2;\n    while (theta < -Math.PI) theta += Math.PI * 2;\n    this.theta = theta;\n  }\n\n  length() {\n    return this.r;\n  }\n\n  angle() {\n    return this.theta;\n  }\n\n  unit() {\n    return new Vector(1, this.theta);\n  }\n\n  // https://math.stackexchange.com/questions/1365622/adding-two-polar-vectors\n  static sumVectors(vs: Vector[]) {\n    let x = 0;\n    let y = 0;\n    for (const v of vs) {\n      x += v.r * Math.cos(v.theta);\n      y += v.r * Math.sin(v.theta);\n    }\n    return new Vector(Math.sqrt(x * x + y * y), Math.atan2(y, x));\n  }\n\n  divide(n: number) {\n    return new Vector(this.r / n, this.theta);\n  }\n\n  multiply(n: number) {\n    return new Vector(this.r * n, this.theta);\n  }\n\n  limit(n: number) {\n    if (this.r < n) {\n      return this.clone();\n    }\n    return new Vector(n, this.theta);\n  }\n\n  clone() {\n    return new Vector(this.r, this.theta);\n  }\n}\n\n// Provides a simple 3D vector class. Vector operations can be done using member\n// functions, which return new vectors, or static functions, which reuse\n// existing vectors to avoid generating garbage.\nexport class Vector2D {\n  x: number;\n  y: number;\n  z: number;\n\n  _length?: number;\n  _unit?: Vector2D;\n  _angle?: number;\n\n  constructor(x: number, y: number, z?: number) {\n    if (isNaN(x) || isNaN(y) || isNaN(z || 0)) {\n      throw new Error(\"Vector2D cannot have NaN\");\n    }\n\n    this.x = x;\n    this.y = y;\n    // this.z = z || 0;\n    this.z = 0;\n  }\n\n  // ### Instance Methods\n  // The methods `add()`, `subtract()`, `multiply()`, and `divide()` can all\n  // take either a vector or a number as an argument.\n  negative() {\n    return new Vector2D(-this.x, -this.y, -this.z);\n  }\n\n  add(v: Vector2D | number) {\n    if (v instanceof Vector2D)\n      return new Vector2D(this.x + v.x, this.y + v.y, this.z + v.z);\n    else return new Vector2D(this.x + v, this.y + v, this.z + v);\n  }\n\n  subtract(v: Vector2D | number) {\n    if (v instanceof Vector2D)\n      return new Vector2D(this.x - v.x, this.y - v.y, this.z - v.z);\n    else return new Vector2D(this.x - v, this.y - v, this.z - v);\n  }\n\n  multiply(v: Vector2D | number) {\n    if (v instanceof Vector2D)\n      return new Vector2D(this.x * v.x, this.y * v.y, this.z * v.z);\n    else return new Vector2D(this.x * v, this.y * v, this.z * v);\n  }\n\n  divide(v: Vector2D | number) {\n    if (v instanceof Vector2D)\n      return new Vector2D(this.x / v.x, this.y / v.y, this.z / v.z);\n    else return new Vector2D(this.x / v, this.y / v, this.z / v);\n  }\n\n  equals(v: Vector2D) {\n    return this.x == v.x && this.y == v.y && this.z == v.z;\n  }\n\n  dot(v: Vector2D) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n\n  cross(v: Vector2D) {\n    return new Vector2D(\n      this.y * v.z - this.z * v.y,\n      this.z * v.x - this.x * v.z,\n      this.x * v.y - this.y * v.x\n    );\n  }\n\n  length() {\n    return this._length || (this._length = Math.sqrt(this.dot(this)));\n  }\n\n  unit() {\n    return this._unit || (this._unit = this.divide(this.length()));\n  }\n\n  // 2d-angle\n  angle() {\n    return this._angle || (this._angle = Math.atan2(this.y, this.x));\n  }\n\n  limit(n: number) {\n    if (this.length() > n) {\n      return this.unit().multiply(n);\n    }\n    return this.clone();\n  }\n\n  min() {\n    return Math.min(Math.min(this.x, this.y), this.z);\n  }\n\n  max() {\n    return Math.max(Math.max(this.x, this.y), this.z);\n  }\n\n  toAngles() {\n    return {\n      theta: Math.atan2(this.z, this.x),\n      phi: Math.asin(this.y / this.length()),\n    };\n  }\n\n  angleTo(a: Vector2D) {\n    return Math.acos(this.dot(a) / (this.length() * a.length()));\n  }\n\n  toArray(n: number) {\n    return [this.x, this.y, this.z].slice(0, n || 3);\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y, this.z);\n  }\n\n  static fromAngles(theta: number, phi: number) {\n    return new Vector2D(\n      Math.cos(theta) * Math.cos(phi),\n      Math.sin(phi),\n      Math.sin(theta) * Math.cos(phi)\n    );\n  }\n\n  static averageOfVector2Ds(vectors: Vector2D[]) {\n    const avgX = vectors.map((p) => p.x).reduce(sumR, 0) / vectors.length;\n    const avgY = vectors.map((p) => p.y).reduce(sumR, 0) / vectors.length;\n    const avgZ = vectors.map((p) => p.z).reduce(sumR, 0) / vectors.length;\n\n    return new Vector2D(avgX, avgY, avgZ);\n  }\n}\n\n// ### Static Methods\n// `Vector.randomDirection()` returns a vector with a length of 1 and a\n// statistically uniform direction. `Vector.lerp()` performs linear\n// interpolation between two vectors.\n\n// Vector.negative = function (a, b) {\n//   b.x = -a.x;\n//   b.y = -a.y;\n//   b.z = -a.z;\n//   return b;\n// };\n// Vector.add = function (a, b, c) {\n//   if (b instanceof Vector) {\n//     c.x = a.x + b.x;\n//     c.y = a.y + b.y;\n//     c.z = a.z + b.z;\n//   } else {\n//     c.x = a.x + b;\n//     c.y = a.y + b;\n//     c.z = a.z + b;\n//   }\n//   return c;\n// };\n// Vector.subtract = function (a, b, c) {\n//   if (b instanceof Vector) {\n//     c.x = a.x - b.x;\n//     c.y = a.y - b.y;\n//     c.z = a.z - b.z;\n//   } else {\n//     c.x = a.x - b;\n//     c.y = a.y - b;\n//     c.z = a.z - b;\n//   }\n//   return c;\n// };\n// Vector.multiply = function (a, b, c) {\n//   if (b instanceof Vector) {\n//     c.x = a.x * b.x;\n//     c.y = a.y * b.y;\n//     c.z = a.z * b.z;\n//   } else {\n//     c.x = a.x * b;\n//     c.y = a.y * b;\n//     c.z = a.z * b;\n//   }\n//   return c;\n// };\n// Vector.divide = function (a, b, c) {\n//   if (b instanceof Vector) {\n//     c.x = a.x / b.x;\n//     c.y = a.y / b.y;\n//     c.z = a.z / b.z;\n//   } else {\n//     c.x = a.x / b;\n//     c.y = a.y / b;\n//     c.z = a.z / b;\n//   }\n//   return c;\n// };\n// Vector.cross = function (a, b, c) {\n//   c.x = a.y * b.z - a.z * b.y;\n//   c.y = a.z * b.x - a.x * b.z;\n//   c.z = a.x * b.y - a.y * b.x;\n//   return c;\n// };\n// Vector.unit = function (a, b) {\n//   var length = a.length();\n//   b.x = a.x / length;\n//   b.y = a.y / length;\n//   b.z = a.z / length;\n//   return b;\n// };\n// Vector.fromAngles = function (theta, phi) {\n//   return new Vector(\n//     Math.cos(theta) * Math.cos(phi),\n//     Math.sin(phi),\n//     Math.sin(theta) * Math.cos(phi)\n//   );\n// };\n// Vector.randomDirection = function () {\n//   return Vector.fromAngles(\n//     Math.random() * Math.PI * 2,\n//     Math.asin(Math.random() * 2 - 1)\n//   );\n// };\n// Vector.min = function (a, b) {\n//   return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n// };\n// Vector.max = function (a, b) {\n//   return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n// };\n// Vector.lerp = function (a, b, fraction) {\n//   return b.subtract(a).multiply(fraction).add(a);\n// };\n// Vector.fromArray = function (a) {\n//   return new Vector(a[0], a[1], a[2]);\n// };\n// Vector.angleBetween = function (a, b) {\n//   return a.angleTo(b);\n// };\n"],"names":["_p","require","_sketch","p5","sketch","state","setup","draw","updateState","document","getElementById","createCanvas","frameRate","randomSeed","boids","i","push","id","p","Point","random","v","Vector","Math","PI","undefined","map","boid","dv","flock","filter","someBoid","otherBoid","vector","toPoint","length","angleDiff","normAngle","angle","abs","MAX_ANGLE_DIFF","isNeighbor","vectors","computeSteer","stayInBounds","multiply","maintainDistance","type","GoalType","Acceleration","goal","MAX_ACCEL","theta","mouse","mouseX","mouseY","x","y","moveTowardsMouse","flyToCenterOfFlock","matchVelocity","sumVectors","newBoidVector","limit","newV","dAngle","MAX_TURN_SPEED","r","limitMaxTurnSpeed","add","point","direction","center","X_DIM","forceInBounds","background","fill","circle","Y_DIM","max","color","frameCount","floor","stroke","drawBoid","_Vector","_boid","flockCenter","averageOfPoints","f","flockMate","distance","unit","divide","flockVelocity","Velocity","lerped","scaled","PI_2","desired","acceleration","velocity","radians","translate","rotate","beginShape","vertex","scale","endShape","CLOSE","pop","sumR","total","current","constructor","z","isNaN","Error","this","[object Object]","points","avgX","reduce","avgY","avgZ","sqrt","atan2","cos","sin","vs","n","clone","Vector2D","negative","subtract","equals","dot","cross","_length","_unit","_angle","min","toAngles","phi","asin","angleTo","a","acos","toArray","slice"],"version":3,"file":"index.c1dcf13a.js.map"}