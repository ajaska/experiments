{"mappings":"0pCAAA,IAAAA,EAAAC,EAAAC,EAAA,UACAC,EAAAF,EAAAC,EAAA,+hBAOA,IAAIE,EAAUC,aAAaC,QAAQ,kBACnC,MAAMC,EACe,iBAAZH,EAAuBI,KAAKC,MAAML,GAAW,GAEhDM,EAAeC,IACnBN,aAAaO,QAAQ,iBAAkBJ,KAAKK,UAAUF,KAKlDG,EAAM,KACV,MAAOC,EAASC,GAAchB,EAAMiB,SAAS,KACtCC,EAAUC,GAAenB,EAAMiB,SAASV,GAEzCa,EAAMC,KAAKD,MACXE,EAAeJ,EAClBK,OAAQC,GAAYA,EAAQC,KARlB,KAQkCL,GAC5CM,IAAKF,IACJ,MAAMG,EAAeC,KAAKC,MAAML,EAAQC,KAAOL,EAAM,KAE/CU,EACJH,GAAgB,GAAQA,EAAF,SAAoBI,EAC5C,OACE/B,EAAAgC,cAAA,MAAA,CAAKC,UAAU,UAAUC,IAAKV,EAAQC,KAAMU,MAAO,CAAEL,eAAAA,IAClDN,EAAQT,WAKjB,OACEf,EAAAgC,cAAA,MAAA,KACEhC,EAAAgC,cAAA,MAAA,CACEI,MAAM,kFACNH,UAAU,QAFZ,SAMAjC,EAAAgC,cAAA,MAAA,CACEI,MAAM,2CACNH,UAAU,OACVI,QAAS,KACP,MAAMC,EAAKC,SAASP,cAAc,YAClCM,EAAGE,MAAQtB,EAASQ,IAAKF,GAAYA,EAAQT,SAAS0B,KAAK,MAC3DF,SAASG,KAAKC,YAAYL,GAC1BA,EAAGM,SACHL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,KAT9B,QAcAtC,EAAAgC,cAAA,MAAA,CACEI,MAAM,oBACNH,UAAU,QACVI,QAAS,KACPlB,EAAY,IACZT,EAAY,MALhB,SAUAV,EAAAgC,cAAA,MAAA,CAAKC,UAAU,SAASE,MAAO,CAAEY,OAAQ,UACzC/C,EAAAgC,cAAA,MAAA,CAAKC,UAAU,aACbjC,EAAAgC,cAAA,OAAA,CACEgB,SAAWC,IACT,MAAM7B,EAAMC,KAAKD,MACjBD,EAAY,IAAID,EAAU,CAAEH,QAAAA,EAASU,KAAML,KAC3CV,EAAY,IAAIQ,EAAU,CAAEH,QAAAA,EAASU,KAAML,KAC3CJ,EAAW,IACXiC,EAAEC,mBAGJlD,EAAAgC,cAAA,QAAA,CACEmB,KAAK,OACLX,MAAOzB,EACPqC,SAAWH,GAAMjC,EAAWiC,EAAEI,cAAcb,OAC5Cc,YAAY,sBACZrB,UAAU,eAGdjC,EAAAgC,cAAA,MAAA,CAAKC,UAAU,YAAYX,MAMnCnB,EAASoD,OAAOvD,EAAAgC,cAAClB,EAAD,MAASyB,SAASiB,eAAe","sources":["./src/saying-goodbye/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\ninterface Goodbye {\n  message: string;\n  when: number;\n}\n\nlet storage = localStorage.getItem(\"saying-goodbye\") as unknown;\nconst memories: Goodbye[] =\n  typeof storage === \"string\" ? JSON.parse(storage) : [];\n\nconst setMemories = (newMemories: Goodbye[]) => {\n  localStorage.setItem(\"saying-goodbye\", JSON.stringify(newMemories));\n};\n\nconst TIMING = 240_000;\n\nconst App = () => {\n  const [message, setMessage] = React.useState(\"\");\n  const [goodbyes, setGoodbyes] = React.useState(memories);\n\n  const now = Date.now();\n  const goodbyeNodes = goodbyes\n    .filter((goodbye) => goodbye.when + TIMING > now)\n    .map((goodbye) => {\n      const delaySeconds = Math.round(goodbye.when - now / 1000); // negative number\n      // Only bother with this if we know we're reloaded\n      const animationDelay =\n        delaySeconds < -10 ? `${delaySeconds}s` : undefined;\n      return (\n        <div className=\"goodbye\" key={goodbye.when} style={{ animationDelay }}>\n          {goodbye.message}\n        </div>\n      );\n    });\n\n  return (\n    <div>\n      <div\n        title=\"Type the things you need to say and they'll fade out over the next few minutes.\"\n        className=\"help\"\n      >\n        about\n      </div>\n      <div\n        title=\"Copy all to clipboard (including hidden)\"\n        className=\"copy\"\n        onClick={() => {\n          const el = document.createElement(\"textarea\");\n          el.value = goodbyes.map((goodbye) => goodbye.message).join(\"\\n\");\n          document.body.appendChild(el);\n          el.select();\n          document.execCommand(\"copy\");\n          document.body.removeChild(el);\n        }}\n      >\n        copy\n      </div>\n      <div\n        title=\"Delete everything\"\n        className=\"clear\"\n        onClick={() => {\n          setGoodbyes([]);\n          setMemories([]);\n        }}\n      >\n        clear\n      </div>\n      <div className=\"spacer\" style={{ height: \"50vh\" }} />\n      <div className=\"container\">\n        <form\n          onSubmit={(e) => {\n            const now = Date.now();\n            setGoodbyes([...goodbyes, { message, when: now }]);\n            setMemories([...goodbyes, { message, when: now }]);\n            setMessage(\"\");\n            e.preventDefault();\n          }}\n        >\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.currentTarget.value)}\n            placeholder=\"Let something go...\"\n            className=\"big-input\"\n          />\n        </form>\n        <div className=\"goodbyes\">{goodbyeNodes}</div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"react\"!));\n"],"names":["React","_interopRequireWildcard","require","ReactDOM","storage","localStorage","getItem","memories","JSON","parse","setMemories","newMemories","setItem","stringify","App","message","setMessage","useState","goodbyes","setGoodbyes","now","Date","goodbyeNodes","filter","goodbye","when","map","delaySeconds","Math","round","animationDelay","undefined","createElement","className","key","style","title","onClick","el","document","value","join","body","appendChild","select","execCommand","removeChild","height","onSubmit","e","preventDefault","type","onChange","currentTarget","placeholder","render","getElementById"],"version":3,"file":"index.158b43ed.js.map"}