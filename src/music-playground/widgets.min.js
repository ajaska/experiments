import throttle from 'lodash.throttle'

var AudioSupervisor = (window.AudioSupervisor = function () {
    var n,
      e = this;
    return (
      (e.init = function (e) {
        document.addEventListener &&
          document.addEventListener("visibilitychange", t),
          (Tone.Transport.latencyHint = isMobile() ? 0.06 : "fastest"),
          (n = []);
      }),
      (e.makeGestureOnElementResumeAudioContext = function (e) {
        function t() {
          Tone.context.resume().then(function () {
            e.removeEventListener("touchstart", t, !0),
              e.removeEventListener("touchend", t, !0),
              e.removeEventListener("mousedown", t, !0),
              e.removeEventListener("mouseup", t, !0),
              e.removeEventListener("click", t, !0);
          });
        }
        e.addEventListener("touchstart", t, !0),
          e.addEventListener("touchend", t, !0),
          e.addEventListener("mousedown", t, !0),
          e.addEventListener("mouseup", t, !0),
          e.addEventListener("click", t, !0);
      }),
      (e.registerPlayingWidget = function (e) {
        // console.log('registered', e);
        -1 == n.indexOf(e) && n.push(e);
      }),
      (e.unregisterPlayingWidget = function (t) {
        // console.log('unregistered', t);
        n = n.filter(function (e) {
          return e != t;
        });
      }),
      (e.isOnlyWidgetPlaying = function (e) {
        return 1 === n.length && n[0] === e;
      }),
      (e.areAnyWidgetsPlaying = function () {
        return 0 < n.length;
      }),
      (e.masterEffectChain = function () {
        return Tone.Master;
      }),
      e
    );
    function t() {
      document.hidden && Tone
        ? Tone.Master.volume.rampTo(-1 / 0, 0.3)
        : Tone && Tone.Master.volume.rampTo(0, 0.4);
    }
  }),
  BrowserCompatibility = {
    isBrowserCompatible: function () {
      var e =
          window.hasOwnProperty("AudioContext") ||
          window.hasOwnProperty("webkitAudioContext"),
        t = window.hasOwnProperty("Promise"),
        n = window.hasOwnProperty("Worker");
      return e && t && n;
    },
    appendCompatibilityWarning: function (e, t) {
      var n = document.createElement("div");
      (n.className = "widget__compatibility-message"),
        (n.innerHTML = t),
        e.appendChild(n);
    },
  },
  Drumkit = (window.Drumkit = function () {
    var e,
      i,
      r,
      t = this;
    return (
      (t.init = function (o) {
        if (e) return e;
        return (e = new Promise(function (e) {
          var t = o.map(function (e) {
              return { path: e.path, name: e.midi + "" };
            }),
            n = SAMPLE_CACHE.getBuffers(t);
          ((r = new Tone.MultiPlayer(n).toMaster()).fadeOut = 0.01),
            (i = e),
            Tone.Buffer.on("progress", a),
            Tone.Buffer.on("load", a),
            a();
        }));
      }),
      (t.playNoteAtNumber = n),
      (t.playNotes = function (e) {
        e.forEach(function (t) {
          e.some(function (e) {
            return t.lane.midi === e.lane.choke;
          }) || n(t.lane.midi, t.time, t.lane.choke);
        });
      }),
      (t.stopAll = function () {
        r.stopAll();
      }),
      t
    );
    function a() {
      r.buffers.loaded && i();
    }
    function n(e, t, n) {
      r.start(e + "", t), n && Workarounds.multiplayerStopAll(r, n + "", t);
    }
  }),
  KeySupervisor = (window.KeySupervisor = function () {
    var t,
      o,
      i,
      r,
      e = this;
    return (
      (e.init = function (e) {
        document.addEventListener(
          "keydown",
          function (e) {
            !(function (e) {
              return !0 === t[e.keyCode];
            })(e) && ((t[e.keyCode] = !0), o && o(e));
          },
          !0
        ),
          document.addEventListener(
            "keyup",
            function (e) {
              (t[e.keyCode] = !1), i && i(e);
            },
            !0
          ),
          document.addEventListener &&
            document.addEventListener("visibilitychange", n),
          (t = {});
      }),
      (e.connectWidget = function (e, t, n) {
        r && r();
        (o = e), (i = t), (r = n);
      }),
      e
    );
    function n() {
      document.hidden && r && (r(), (r = i = o = null));
    }
  }),
  LiveSetExport = {
    serviceURL: "https://learningmusic-export.ableton.com",
    checkExportServiceAvailablility: function (e) {
      var t = new XMLHttpRequest();
      (t.timeout = 5e3),
        t.addEventListener("load", function () {
          e(!0);
        }),
        t.addEventListener("error", function () {
          e(!1);
        }),
        t.addEventListener("abort", function () {
          e(!1);
        }),
        t.addEventListener("timeout", function () {
          e(!1);
        }),
        t.open("GET", LiveSetExport.serviceURL + "/availability"),
        t.send();
    },
    createLiveSet: function (e, t, n) {
      var o = new Date().toDateString().replace(/[^a-z0-9]/gi, "_"),
        i = {
          backlink: window.location.href,
          name: "idea_" + o,
          tempo: e,
          tracks: t,
        };
      if (!LiveSetExport.userHasAlreadyExportedOnce())
        var r = window.open(
          LOCALE_PATH + "/live-set-export-waiting.html",
          "_blank"
        );
      var a = new XMLHttpRequest();
      a.addEventListener("load", function () {
        n(void 0);
        var e = this.responseText;
        if (LiveSetExport.userHasAlreadyExportedOnce())
          LiveSetExport.isValidFileId(e) &&
            (window.location = LiveSetExport.downloadURLFromFileId(e));
        else {
          storageAvailable("localStorage") &&
            localStorage.setItem("__userHasExported", "yes");
          var t = "?fileId=" + e;
          r.location.href = LOCALE_PATH + "/live-set-export.html" + t;
        }
      }),
        a.addEventListener("error", function () {
          n("Export failed.");
        }),
        a.addEventListener("abort", function () {
          n("Export was cancelled.");
        }),
        a.open("POST", LiveSetExport.serviceURL + "/export"),
        a.setRequestHeader("Content-Type", "application/json;charset=UTF-8"),
        a.send(JSON.stringify(i));
    },
    downloadURLFromFileId: function (e) {
      return LiveSetExport.serviceURL + "/export?id=" + e;
    },
    userHasAlreadyExportedOnce: function () {
      return (
        !!storageAvailable("localStorage") &&
        "yes" == localStorage.getItem("__userHasExported")
      );
    },
    isValidFileId: function (e) {
      return e.match(
        "[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}"
      );
    },
    createDownloadLink: function (e, t) {
      var n,
        o,
        i,
        r =
          ((n = "fileId"),
          (o = window.location.href),
          (i = new RegExp("[?&]" + n + "=([^&#]*)", "i").exec(o))
            ? i[1]
            : null);
      if (LiveSetExport.isValidFileId(r)) {
        void 0 === t && (t = "");
        var a = document.createElement("a"),
          s = document.createTextNode("Download");
        a.appendChild(s),
          (a.title = "Download your music as an Ableton Live Set"),
          (a.href = LiveSetExport.downloadURLFromFileId(r)),
          (a.className = t),
          document.getElementById(e).appendChild(a),
          a.addEventListener("click", function () {
            a.style.display = "none";
          });
      } else
        document.getElementById(e).innerHTML =
          "Error exporting to Live. Please try again.";
    },
  },
  LiveSetExporter = (window.LiveSetExporter = function () {
    var i;
    return (
      (this.init = function () {
        i = [];
      }),
      (this.registerWidget = function (e) {
        i.push(e),
          e.bind("export", function (e, t) {
            var n = e.getExportInfo();
            if ("takeover" === e.getConfig().onPlay)
              LiveSetExport.createLiveSet(n.tempo, n.tracks, t);
            else {
              var o = i.reduce(function (e, t) {
                return e.concat(t.getExportInfo().tracks);
              }, []);
              LiveSetExport.createLiveSet(n.tempo, o, t);
            }
          });
      }),
      this
    );
  }),
  Loader = (window.Loader = function () {
    var t, n;
    return (
      (this.init = function (e) {
        ((t = document.createElement("div")).id = e.widgetId + "loader"),
          (t.className = ""),
          ((n = document.createElement("div")).className =
            "widget-loader__loading-animation"),
          t.appendChild(n),
          document.getElementById(e.widgetId).appendChild(t);
      }),
      (this.hide = function () {
        t.style.display = "none";
      }),
      (this.onAudioLoaded = function () {
        n.style.display = "none";
      }),
      this
    );
  }),
  Metronome = (window.Metronome = function () {
    var o, t;
    return (
      (this.init = function (e) {
        var t = pathToWidgetSounds(),
          n = {
            metro: t + "metronome/Metronome" + getAudioExtension(),
            metroup: t + "metronome/MetronomeUp" + getAudioExtension(),
          };
        (o = new Tone.MultiPlayer(n, i).toMaster()).volume.value = 12;
      }),
      (this.start = function (e) {
        i(), t.start(e);
      }),
      (this.stop = function (e) {
        t.stop(e), t.dispose();
      }),
      this
    );
    function i() {
      t = new Tone.Sequence(
        function (e, t) {
          o.start(t, e);
        },
        ["metroup", "metro", "metro", "metro"],
        "4n"
      );
    }
  }),
  Piano = (window.Piano = function () {
    var e,
      d,
      u,
      i,
      c,
      t = this;
    return (
      (t.init = function (l) {
        (i = l),
          (e =
            e ||
            new Promise(function (e) {
              var t,
                n,
                o,
                i,
                r = l.samples.map(function (e) {
                  return { path: e.path, name: e.midi + "" };
                }),
                a = SAMPLE_CACHE.getBuffers(r);
              (u = new Tone.MultiPlayer(a)).connect(
                SUPERVISOR.masterEffectChain()
              ),
                (u.fadeOut = l.fadeout.duration),
                (c = []);
              for (var s = 0; s < 128; s++)
                c.push(
                  ((t = s),
                  (n = l.samples),
                  void 0,
                  (o = n.map(function (e) {
                    return e.midi;
                  })),
                  { val: (i = nearest(t, o)), offset: t - i })
                );
              (d = e),
                Tone.Buffer.on("progress", p),
                Tone.Buffer.on("load", p),
                p();
            }));
        return e;
      }),
      (t.playNoteAtFrequency = function (e, t, n) {
        o(Math.round(Tone.Frequency(e).toMidi()), t, n);
      }),
      (t.playNoteAtNumber = o),
      (t.stopAll = function () {
        u.stopAll();
      }),
      t
    );
    function p() {
      u.buffers.loaded && d();
    }
    function o(e, t, n) {
      var o = c[e];
      u.start(o.val + "", t, 0, n + "-" + i.fadeout.offset, o.offset);
    }
  }),
  Recorder = (window.Recorder = function () {
    var t;
    return (
      (this.init = function (e) {}),
      (this.recordEvent = function (e) {
        t && t(e);
      }),
      (this.connect = function (e) {
        t = e;
      }),
      this
    );
  }),
  SampleCache = (window.SampleCache = function () {
    var i,
      n = this;
    return (
      (n.init = function () {
        i = new Tone.Buffers();
      }),
      (n.getBuffer = function (e, t) {
        {
          if (i.has(e)) return i.get(e);
          var n = t || getAudioExtension(),
            o = pathToWidgetSounds() + e + n;
          return i.add(e, o), i.get(e);
        }
      }),
      (n.getBuffers = function (e) {
        var t = new Tone.Buffers();
        return (
          e.forEach(function (e) {
            t.add(e.name, n.getBuffer(e.path, e.extension));
          }),
          t
        );
      }),
      n
    );
  }),
  SingleTouchObserver = (window.SingleTouchObserver = function () {
    var r;
    return (
      (this.init = function (e) {
        (r = e),
          d3
            .select(e.node)
            .append("div")
            .attr("class", "mouseObserver")
            .style("width", "100%")
            .style("height", "100%")
            .on("mousedown", t)
            .on("touchstart", t);
      }),
      this
    );
    function t() {
      if ("mousedown" !== d3.event.type || 0 === d3.event.button) {
        var t = d3.select(this).classed("active", !0),
          n = d3
            .select(window)
            .on("touchmove", o)
            .on("mousemove", o)
            .on("mouseup", i)
            .on("touchend", i),
          e = d3.mouse(this);
        r.onDown(e[0], e[1]),
          document.activeElement && document.activeElement.blur(),
          d3.event.preventDefault();
      }
      function o() {
        var e = d3.mouse(t.node());
        r.onMove(e[0], e[1]);
      }
      function i() {
        var e = d3.mouse(t.node());
        n
          .on("touchmove", null)
          .on("mousemove", null)
          .on("mouseup", null)
          .on("touchend", null),
          r.onUp(e[0], e[1]);
      }
    }
  }),
  Tooltip = {
    inject: function (e, t, n, o, i) {
      if (t && e && !(Tooltip.userHasSeenTooltip(t.name) && !t.showalways)) {
        e.getBoundingClientRect();
        (xShiftFactor = 0),
          "left" == i
            ? (xShiftFactor = 0.25)
            : "right" == i && (xShiftFactor = -0.25),
          (xShiftInPx = 200 * xShiftFactor);
        var r = document.createElement("div");
        (r.className = "widget-tooltip"),
          (r.style.width = "200px"),
          (r.style.top = n || "100%"),
          (r.style.left = o || "50%"),
          (r.style.marginTop = "12px"),
          (r.style.marginLeft = -100 + xShiftInPx + "px");
        var a = document.createElement("div");
        (a.className = "widget-tooltip__triangle"),
          (a.style.top = "-20px"),
          (a.style.left = 90 - xShiftInPx + "px"),
          (a.style.border = "solid 10px"),
          (a.style.borderColor = "transparent transparent black transparent"),
          r.appendChild(a);
        var s = document.createElement("div");
        (s.className = "widget-tooltip__text"),
          (s.innerHTML = t["@text"]),
          r.appendChild(s);
        var l = document.createElement("div");
        (l.className = "widget-tooltip__dismiss"),
          (l.innerHTML = t["@close"] ? t["@close"] : "Close"),
          r.appendChild(l),
          r.addEventListener("click", function () {
            r.classList.add("widget-tooltip--hide"),
              Tooltip.setUserHasSeenTooltip(t.name);
          }),
          e.appendChild(r);
      }
    },
    tooltipKeyForLocalStorage: function (e) {
      return "__tooltip_" + e;
    },
    userHasSeenTooltip: function (e) {
      return (
        !!storageAvailable("localStorage") &&
        "dismissed" ==
          localStorage.getItem(Tooltip.tooltipKeyForLocalStorage(e))
      );
    },
    setUserHasSeenTooltip: function (e) {
      storageAvailable("localStorage") &&
        localStorage.setItem(Tooltip.tooltipKeyForLocalStorage(e), "dismissed");
    },
    appendTooltippableChild: function (e, t) {
      var n = document.createElement("div");
      (n.style.position = "relative"), n.appendChild(t), e.appendChild(n);
    },
  },
  Transport = (window.Transport = function () {
    var t,
      n,
      o,
      i,
      r,
      a,
      s,
      e = this;
    return (
      (e.init = function (e) {
        (n = e),
          ((t = document.createElement("div")).className = "widget-transport"),
          e.node.appendChild(t),
          ((o = document.createElement("button")).onclick = m),
          Tooltip.appendTooltippableChild(t, o),
          o.parentElement.classList.add("widget__transport-btn-wrapper"),
          ((i = document.createElement("button")).onclick = g),
          Tooltip.appendTooltippableChild(t, i),
          i.parentElement.classList.add("widget__transport-btn-wrapper"),
          (r = "stopped"),
          (a = !1),
          (s = e.tempo),
          Tone.Transport.on("takeover", c),
          Tone.Transport.on("sessionTempoChanged", l),
          d();
      }),
      (e.isRecording = function () {
        return a;
      }),
      (e.isPlaying = function () {
        return "playing" == r;
      }),
      (e.getTempo = function () {
        return s;
      }),
      (e.setTempo = function (e) {
        (s = e),
          ("join" == n.onPlay || ("takeover" == n.onPlay && "playing" == r)) &&
            ((Tone.Transport.bpm.value = s),
            Tone.Transport.emit("sessionTempoChanged", s));
        n.onTempoChanged && n.onTempoChanged(s);
      }),
      (e.playButton = function () {
        return o;
      }),
      (e.recordButton = function () {
        return i;
      }),
      e
    );
    function l(e) {
      // console.log("l", "e");
      "join" == n.onPlay && ((s = e), n.onTempoChanged && n.onTempoChanged(s));
    }
    function d() {
      (o.innerHTML = {
        playing: "<i class='icon-pause'></i>",
        queued: "<i class='icon-play widget_transport-icon--queued'></i>",
        stopped: "<i class='icon-play'></i>",
      }[r]),
        (o.className = "btn widget__transport-btn"),
        (function () {
          i.innerHTML = "<i class='icon-record'></i>";
          var e = n.showRecordButton ? "" : " hidden";
          i.className =
            a && "playing" == r
              ? "btn widget__transport-btn widget-button--recording" + e
              : "btn widget__transport-btn" + e;
        })();
    }
    function u() {
      a && ((a = !1), METRONOME.stop()),
        n.onStopPlayback(),
        SUPERVISOR.unregisterPlayingWidget(n.widgetId),
        (r = "stopped"),
        d();
    }
    function c(e) {
      "playing" == r && u();
    }
    function p() {
      (Tone.Transport.bpm.value = s),
        (Tone.Transport.position = "0:0:0"),
        Tone.Transport.start(ToneTransportStartDelay()),
        a && METRONOME.start(),
        n.onStartPlayback(),
        SUPERVISOR.registerPlayingWidget(n.widgetId),
        (r = "playing"),
        d();
    }
    function f() {
      (Tone.Transport.position = "0:0:0"), Tone.Transport.stop(), u();
    }
    // "Toggle playback"
    function m() {
      // console.log("m", n.widgetId);
      if ((!0, "queued" != r))
        if (SUPERVISOR.areAnyWidgetsPlaying()) {
          if (SUPERVISOR.areAnyWidgetsPlaying()) {
            var e = "playing" == r;
            "takeover" == n.onPlay
              ? e
                ? f()
                : (Tone.Transport.emit("takeover"), f(), p())
              : "join" == n.onPlay &&
                (e
                  ? SUPERVISOR.isOnlyWidgetPlaying(n.widgetId)
                    ? f()
                    : c()
                  : (a && METRONOME.start("@1m"),
                    Tone.Transport.scheduleOnce(function (e) {
                      (r = "playing"), d();
                    }, "@1m"),
                    n.onStartQuantizedPlayback(),
                    SUPERVISOR.registerPlayingWidget(n.widgetId),
                    (r = "queued"),
                    d()));
          }
        } else p();
      // console.log(r)
    }
    function g() {
      (a = !a),
        "playing" == r
          ? a
            ? METRONOME.start("0:0:0")
            : METRONOME.stop()
          : m(),
        d();
    }
  });
function getSixteenths(e) {
  return parseFloat(e.split(":")[2]);
}
function getBeats(e) {
  return parseFloat(e.split(":")[1]);
}
function getBars(e) {
  return parseFloat(e.split(":")[0]);
}
function getTotalBeats(e) {
  return 4 * getBars(e) + getBeats(e) + getSixteenths(e) / 4;
}
function beatsAsBarsBeatsSixteenths(e) {
  return Tone.Time("0:1:0 * " + e).toBarsBeatsSixteenths();
}
function canPlayAudio(e) {
  return Tone.Buffer.supportsType(e);
}
function getAudioExtension() {
  var e = ".wav";
  return (
    canPlayAudio("ogg") ? (e = ".ogg") : canPlayAudio("mp4") && (e = ".mp4"), e
  );
}
function pathToWidgetSounds() {
  return "./sounds/";
}
function pctInRange(e, t, n) {
  return (n - e) / (t - e);
}
function fitsInRange(e, t, n) {
  return e <= n && n <= t;
}
function almostEqual(e, t, n) {
  return null == n && (n = 0.001), Math.abs(e - t) < n;
}
function nearest(e, t) {
  for (var n = Number.MAX_VALUE, o = 0; o < t.length; o++) {
    var i = t[o],
      r = Math.abs(e - n);
    Math.abs(e - i) <= r && (n = i);
  }
  return n;
}
function assert(e, t) {
  if (!e) {
    if (((t = t || "Assertion failed"), "undefined" != typeof Error))
      throw new Error(t);
    throw t;
  }
}
function storageAvailable(e) {
  try {
    var t = window[e],
      n = "__storage_test__";
    return t.setItem(n, n), t.removeItem(n), !0;
  } catch (e) {
    return !1;
  }
}

// BEGIN ARLAN CODE

const svg_path = "M429.742,319.31L82.49,0l-0.231,471.744l105.375-100.826l61.89,141.083l96.559-42.358l-61.89-141.083L429.742,319.31z"

function establishCursorListeners() {
  const observables = document.querySelectorAll('.mouseObserver');
  console.log('loading ecl', observables)

  if (observables.length < 4) {
    return setTimeout(establishCursorListeners, 1000)
  }

  observables.forEach(observable => {
    let widget = null;
    let ptr = observable;
    while (ptr != null && Array.from(ptr.classList).indexOf('widget-pianoroll') === -1 ) {
      ptr = ptr.parentElement;
    }
    if (ptr == null) return
    widget = ptr.id;

    let activeElement = null

    // Use throttle so we only fire these max every 200ms (experimentally chosen)
    observable.addEventListener('mousemove', _.throttle(e => {
      if (window.arlan_ws) {
        arlan_ws.send(JSON.stringify({
          type: "cursor",
          cursor: {
            widget,
            rel_x: e.offsetX / e.target.offsetWidth,
            rel_y: e.offsetY / e.target.offsetHeight,
          }
        }));
      }
    }, 200));
  })
}

document.addEventListener("DOMContentLoaded", function() {
  establishCursorListeners()
})

window.arlan_cursor_pool = window.arlan_cursor_pool || []

function connectToWebsocket() {
  const ws_url =
    process.env.NODE_ENV === "development"
      ? "ws://localhost:1238"
      : "wss://experiments-do.ajaska.com:443/music-playground/";
  const ws = new WebSocket(ws_url);
  ws.onmessage = (e) => {
    const message = JSON.parse(e.data)
    switch (message.type) {
      case "state": {
        const pianoRoll = window[message.model]
        const { transport, modelSetter } = pianoRoll.getLiveAdjustThings()
        const state = JSON.parse(message.state)
        if (transport)
          transport.setTempo(state.tempo)
        if (modelSetter)
          modelSetter.setModel(state)
        return
      }
      case "sound": {
        const pianoRoll = window[message.model]
        const { player } = pianoRoll.getLiveAdjustThings()
        player.trigger("playNotes", message.sound);
        return
      }
      case "cursor": {
        const cursors = message.cursors;
        let svgs = window.arlan_cursor_pool
        if (svgs.length !== cursors.length) {
          svgs.map(svg => svg.remove());
          svgs = cursors.map(cursor => {
            const bodySelection = d3.select("body");
            const svgSelection = bodySelection.append("svg")
                                            .attr("width", 20)
                                            .attr("height", 20)
                                            .attr("viewBox", "0 0 512 512");
            const circleSelection = svgSelection.append("path")
                                              .attr("fill", cursor.color)
                                              .attr("d", svg_path);
            const node = svgSelection.node();
            node.style.position = 'absolute';
            node.style.zIndex = '300';
            return node;
          })
          window.arlan_cursor_pool = svgs
        }

        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        for (let i = 0; i < cursors.length; i++) {
          if (cursors[i].widget == null) {
            svgs[i].style.left = "0px";
            svgs[i].style.top = "0px";
          } else {
            const elem = document.querySelector("#" + cursors[i].widget + ' .mouseObserver');
            const box = elem.getBoundingClientRect();
            const scaledOffsetX = box.width * cursors[i].rel_x;
            const scaledOffsetY = box.height* cursors[i].rel_y;
            svgs[i].style.left = scrollLeft + box.x + scaledOffsetX + "px";
            svgs[i].style.top = scrollTop + box.y + scaledOffsetY + "px";
          }
        }
        return;
      }
      default: {
        throw new Error("Unable to handle message", message)
      }
    }
  }

  ws.onopen = () => {
    const statusElement = document.getElementById("connection-status");
    statusElement.innerHTML = "[[ CONNECTION: Online ]]"
    statusElement.className = "online"
  }
  ws.onclose = () => {
    const statusElement = document.getElementById("connection-status");
    statusElement.innerHTML = "[[ CONNECTION: Lost, reconnecting... ]]"
    statusElement.className = ""

    window.setTimeout(() => connectToWebsocket(), 5000)
  }

  window.arlan_ws = ws
}
window.setTimeout(() => connectToWebsocket(), 500)

// END ARLAN CODE

// ARLAN NOTE: use these functions
function getSavedModelString(e) {
// console.log("gsms", e)
// console.trace()
  return storageAvailable("localStorage") ? localStorage.getItem(e) : void 0;
}
function getSavedModel(e) {
  try {
    return JSON.parse(getSavedModelString(e));
  } catch (e) {
    return;
  }
}
function tryRestoreApp(e, t, n) {
  var o = getSavedModel(e);
  if (o && o.version == n) return t.ports.importModel.send(o), o;
}
function trySaveState(e, t, n) {
  // ARLAN NOTE: reliably called on every update
  // console.log("persisting state", e /* state */, t /* name */, n /* version */) 
  if (storageAvailable("localStorage"))
    try {
      var o = e;
      o.version = n;
      var i = JSON.stringify(o);
      localStorage.setItem(t, i); // , isDeveloperMode() && console.log(i);

      // BEGIN ARLAN CODE
      if (window.arlan_ws) {
        window.arlan_ws.send(JSON.stringify({ type: "state", model: t, state: i }))
      }
      // END ARLAN CODE
    } catch (e) {
      return;
    }
}
var DEVELOPER_MODE = !1;
function isDeveloperMode() {
  return window.location.href.includes("localhost") || DEVELOPER_MODE;
}
function isMobile() {
  return !!(
    navigator.userAgent.match(/Android/i) ||
    navigator.userAgent.match(/webOS/i) ||
    navigator.userAgent.match(/iPhone/i) ||
    navigator.userAgent.match(/iPad/i) ||
    navigator.userAgent.match(/iPod/i) ||
    navigator.userAgent.match(/BlackBerry/i) ||
    navigator.userAgent.match(/Windows Phone/i)
  );
}
function isChromeOnIOS() {
  return !!navigator.userAgent.match("CriOS");
}
function keyFromPhysicalCode(e) {
  return e.includes("Digit")
    ? e.split("Digit")[1]
    : e.includes("Key")
    ? e.split("Key")[1]
    : void 0;
}
function keyEventToPhysicalKey(e) {
  return e.code ? keyFromPhysicalCode(e.code) : String.fromCharCode(e.keyCode);
}
function clearCookies() {
  function n(e, t) {
    document.cookie = t
      ? e +
        "=; Path=/; Domain=" +
        t +
        "; Expires=Thu, 01 Jan 1970 00:00:01 GMT;"
      : e + "=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;";
  }
  try {
    document.cookie.split(";").forEach(function (e) {
      var t = e.split("=")[0];
      t && 0 === t.indexOf("_g") ? n(t, document.domain) : t && n(t);
    });
  } catch (e) {
    console.log();
  }
}
function ToneTransportStartDelay() {
  return "+0.1";
}
clearCookies();
var GLOBAL_PITCHPAD_SYNTH,
  Workarounds = {
    multiplayerStopAll: function (e, t, n) {
      try {
        for (;;) e.stop(t, n);
      } catch (e) {}
    },
  },
  PitchpadSynth = (window.PitchpadSynth = function () {
    var i,
      r,
      a,
      s,
      l,
      d,
      e = this;
    return (
      (e.init = function (e) {
        (i = []),
          (r = 3),
          (a = []),
          (s = []),
          (l = []),
          (d = Tone.context.createGain()).connect(Tone.Master),
          (d.gain.value = 0.5);
        for (var t = 0; t < r; t++) {
          i[t] = null;
          var n = Tone.context.createOscillator(),
            o = Tone.context.createGain();
          (n.type = "triangle"),
            n.connect(o),
            o.connect(d),
            (o.gain.value = 1e-6),
            n.start(0),
            a.push(n),
            s.push(o),
            l.push(-1);
        }
      }),
      (e.startTouch = function (e, t) {
        var n = i.findIndex(function (e) {
          return null === e;
        });
        if (-1 == n) return;
        (i[n] = e),
          a[n].frequency.setValueAtTime(t, Tone.context.currentTime),
          (l[n] = t),
          c(n);
      }),
      (e.moveTouch = function (e, t, n) {
        var o = u(e);
        if (-1 == o) return;
        a[o].frequency.setValueAtTime(t, Tone.context.currentTime),
          n && !almostEqual(t, l[o]) && c(o);
        l[o] = t;
      }),
      (e.stopTouch = t),
      (e.stopAll = function () {
        for (var e = 0; e < r; e++) t(i[e]);
      }),
      e
    );
    function u(t) {
      return i.findIndex(function (e) {
        return e === t;
      });
    }
    function c(e) {
      var t = Tone.context.currentTime;
      s[e].gain.cancelScheduledValues(t),
        s[e].gain.setTargetAtTime(1, t + 0.02, 0.001),
        s[e].gain.setTargetAtTime(0.3, t + 0.02 + 0.1, 0.01);
    }
    function t(e) {
      var t = u(e);
      -1 != t &&
        ((function (e) {
          var t = Tone.context.currentTime;
          s[e].gain.cancelScheduledValues(t),
            s[e].gain.setTargetAtTime(0, t + 0.05, 0.1);
        })(t),
        (i[t] = null),
        (l[t] = -1));
    }
  }),
  ScaleExplorer = (window.ScaleExplorer = function () {
    var i, r, a, t, n, s, l, d, u, o, c;
    return (
      (this.init = function (e) {
        if (!BrowserCompatibility.isBrowserCompatible())
          return void BrowserCompatibility.appendCompatibilityWarning(
            document.getElementById(e.widgetId),
            e.lang["@incompatiblebrowser"]
          );
        (i = e),
          (mLoader = new Loader()),
          mLoader.init(e),
          mLoader.onAudioLoaded(),
          (function () {
            SUPERVISOR.makeGestureOnElementResumeAudioContext(
              document.getElementById(i.widgetId)
            );
            var e = document.getElementById(i.widgetId);
            e.style.position = "relative";
            var t = document.createElement("div");
            (t.id = i.widgetId + "appHolder"),
              (t.style.textAlign = "center"),
              e.appendChild(t),
              (c = Elm.ScaleExplorer.embed(t, {
                scale: x(),
                startNote: (function () {
                  var e = x()[0];
                  return e - (e % 12);
                })(),
                customNoteNames: I()
                  ? null
                  : i.frequencies.map(function (e) {
                      return e.name;
                    }),
                customNoteColors: I()
                  ? null
                  : i.frequencies.map(function (e) {
                      return e.color ? e.color : "";
                    }),
                showPiano: "yes" == i.showPiano,
                showPads: i.isQuantized,
                showScaleChooser: "yes" == i.showScaleChooser,
                showRootChooser: "yes" == i.showRootChooser,
                availableScaleNames: i.availableScales.split(","),
                defaultScaleName: i.defaultScale,
                defaultRootName: i.defaultRoot,
                scaleCanBeMappedToPiano: !("no" == i.scaleCanBeMappedToPiano),
                keyboardMappings: i.keyboard ? i.keyboard.split("") : [],
                showKeyboardButton: i.isQuantized && !isMobile(),
                lang: i.lang,
              })).ports.exportScale.subscribe(function (e) {
                (o = e), S(), a.stopAll();
              }),
              c.ports.keyboardActive.subscribe(function (e) {
                e
                  ? KEY_SUPERVISOR.connectWidget(y, T, b)
                  : KEY_SUPERVISOR.connectWidget(null, null, null);
              }),
              GLOBAL_PITCHPAD_SYNTH ||
                (GLOBAL_PITCHPAD_SYNTH = new PitchpadSynth()).init();
            (a = GLOBAL_PITCHPAD_SYNTH),
              (r = d3
                .select("#" + i.widgetId)
                .append("svg")
                .attr(
                  "class",
                  "widget-scale-explorer__mouse-observer grabbable"
                )
                .style("left", "0")
                .style("bottom", "0")
                .style("width", "100%")).on("mousedown", h),
              r.on("mousemove", function () {
                d3.event.preventDefault();
              }),
              r.on("mouseup", function () {
                d3.event.preventDefault();
              }),
              r.on("touchstart", m),
              E(),
              window.addEventListener("resize", E),
              (d = P().map(function (e) {
                return !1;
              })),
              (u = P().map(function (e) {
                return !1;
              })),
              w([]),
              d3.timer(g),
              i.tip &&
                (function (e) {
                  switch (e) {
                    case "lowhighpitch":
                      Tooltip.inject(
                        document.getElementById(i.widgetId),
                        (function (e) {
                          var t = i.tips[e];
                          return (
                            (t.name = e), (t["@close"] = i.lang["@close"]), t
                          );
                        })(e),
                        "80%"
                      );
                  }
                })(i.tip);
          })();
      }),
      this
    );
    function p(e) {
      return i.isQuantized ? n(e) : t(e);
    }
    function f() {
      return parseInt(r.style("width"), 10);
    }
    function m() {
      d3.event.preventDefault();
      var o = d3.select(this).classed("active", !0);
      o.on("touchmove", function () {
        d3.event.preventDefault();
        for (var e = 0; e < d3.event.changedTouches.length; e++) {
          var t = d3.event.changedTouches.item(e),
            n = d3.touch(o.node(), t.identifier)[0];
          a.moveTouch(t.identifier, p(n), i.isQuantized);
        }
        w(d3.touches(r.node()));
      })
        .on("touchend", function () {
          d3.event.preventDefault();
          for (var e = 0; e < d3.event.changedTouches.length; e++) {
            var t = d3.event.changedTouches.item(e),
              n = d3.touch(o.node(), t.identifier)[0];
            a.stopTouch(t.identifier, p(n));
          }
          w(d3.touches(r.node()));
        })
        .on("touchcancel", function () {
          d3.event.preventDefault();
          for (var e = 0; e < d3.event.changedTouches.length; e++) {
            var t = d3.event.changedTouches.item(e),
              n = d3.touch(o.node(), t.identifier)[0];
            a.stopTouch(t.identifier, p(n));
          }
          w(d3.touches(r.node()));
        });
      for (var e = 0; e < d3.event.changedTouches.length; e++) {
        var t = d3.event.changedTouches.item(e),
          n = d3.touch(o.node(), t.identifier)[0];
        a.startTouch(t.identifier, p(n));
      }
      w(d3.touches(r.node()));
    }
    function g() {
      if (l) {
        l = !1;
        var e = r.selectAll("circle.widget-scale-explorer__touch").data(s);
        e.exit().remove(),
          e
            .enter()
            .append("circle")
            .attr("class", "widget-scale-explorer__touch")
            .attr("r", "15px")
            .merge(e)
            .attr("cx", function (e) {
              return e[0];
            })
            .attr("cy", function (e) {
              return parseInt(r.style("height"), 10) / 2;
            });
      }
    }
    function h() {
      var t = d3.select(this).classed("active", !0),
        e = d3
          .select(window)
          .on("mousemove", function () {
            var e = d3.mouse(t.node());
            w([e]), a.moveTouch("mouse", p(e[0]), i.isQuantized);
          })
          .on("mouseup", function () {
            w([]),
              a.stopTouch("mouse"),
              e.on("mousemove", null).on("mouseup", null);
          });
      a.startTouch("mouse", p(d3.mouse(this)[0])),
        w([d3.mouse(this)]),
        d3.event.preventDefault();
    }
    function v(e) {
      var t = keyEventToPhysicalKey(e);
      return null == t
        ? -1
        : i.keyboard.split("").findIndex(function (e) {
            return e.toUpperCase() == t.toUpperCase();
          });
    }
    function y(e) {
      var t = v(e);
      if (!(t < 0)) {
        var n = P()[t];
        if ((a.startTouch("key" + t, n), (d[t] = !0), c)) {
          var o = x()[t];
          c.ports.noteOn.send(o);
        }
      }
    }
    function T(e) {
      var t = v(e);
      if (!(t < 0) && (a.stopTouch("key" + t), (d[t] = !1), c)) {
        var n = x()[t];
        c.ports.noteOff.send(n);
      }
    }
    function w(e) {
      if (((l = !0), (s = e), u && c)) {
        var o = P().length,
          i = [],
          r = f() / o;
        s.forEach(function (e) {
          var t = e[0],
            n = _.clamp(Math.floor(t / r), 0, o - 1);
          i.push(n);
        });
        for (var t = 0; t < u.length; t++) {
          var n = u[t];
          if (
            null !=
            i.find(function (e) {
              return e == t;
            })
          ) {
            if (!n) {
              u[t] = !0;
              var a = x()[t];
              c.ports.noteOn.send(a);
            }
          } else if (n) {
            u[t] = !1;
            a = x()[t];
            c.ports.noteOff.send(a);
          }
        }
      }
    }
    function E() {
      S(), w([]);
    }
    function b() {
      c.ports.resetNoteOnState.send(!0), c.ports.keyboardDisconnected.send(!0);
      for (var e = 0; e < d.length; e++)
        d[e] && (a.stopTouch("key" + e), (d[e] = !1));
    }
    function S() {
      (n = d3.scaleQuantize().domain([0, f()]).range(P())),
        (t = d3.scaleLinear().domain([0, f()]).range(P()).clamp(!0));
    }
    function I() {
      return i.defaultRoot || i.defaultScale;
    }
    function P() {
      return I()
        ? x().map(function (e) {
            return Tone.Frequency(e, "midi").toFrequency();
          })
        : i.frequencies.map(function (e) {
            return e.freq;
          });
    }
    function x() {
      return I()
        ? o ||
            [0, 2, 4, 5, 7, 9, 11, 12].map(function (e) {
              return e + 60;
            })
        : "no" != i.scaleCanBeMappedToPiano
        ? i.frequencies.map(function (e) {
            return Math.round(Tone.Frequency(e.freq).toMidi());
          })
        : i.frequencies.map(function (e, t) {
            return t;
          });
    }
  }),
  SimpleDrumpad = (window.SimpleDrumpad = function () {
    var n, t, o, i, r, a, s, l;
    return (
      (this.init = function (e) {
        if (!BrowserCompatibility.isBrowserCompatible())
          return void BrowserCompatibility.appendCompatibilityWarning(
            document.getElementById(e.widgetId),
            e.lang["@incompatiblebrowser"]
          );
        (n = e), (t = new Loader()).init(n), v() && t.hide();
        (s = !1), (a = new Drumkit()).init(e.kit.samples).then(y);
      }),
      this
    );
    function d(e) {
      return e.name.replace(/\s/g, "");
    }
    function u(e) {
      !(function (e) {
        o.select("#" + d(e))
          .transition()
          .duration(50)
          .style("background-color", "#FED134")
          .transition()
          .duration(200)
          .style("background-color", "#858585");
      })(e),
        a.playNoteAtNumber(e.midi, 0, e.choke),
        n.recorder && n.recorder.recordEvent(e);
    }
    function e() {
      var e = i.selectAll(".widget__pad").data(n.kit.samples);
      e.enter()
        .append("div")
        .attr("class", "widget__pad widget__pad--drum")
        .attr("id", function (e, t) {
          return d(e);
        })
        .on("mousedown", function (e, t) {
          u(e), d3.event.preventDefault();
        })
        .on("touchstart", function (e, t) {
          d3.event.stopPropagation(), d3.event.preventDefault(), u(e);
        })
        .merge(e)
        .html(function (e, t) {
          return s
            ? "<kbd class='widget__pad__key'>" +
                n.keyboard.split("")[t].toUpperCase() +
                "</kbd><div class='widget__pad__label'>" +
                e.name +
                "</div>"
            : "<div class='widget__pad__label'>" + e.name + "</div>";
        });
    }
    function c(e) {
      var t = (function (e) {
        var t = keyEventToPhysicalKey(e);
        return null == t
          ? -1
          : n.keyboard.split("").findIndex(function (e) {
              return e.toUpperCase() == t.toUpperCase();
            });
      })(e);
      -1 != t && u(n.kit.samples[t]);
    }
    function p(e) {}
    function f() {
      (s = !1), g(), e();
    }
    function m() {
      s
        ? (KEY_SUPERVISOR.connectWidget(null, null, null), f())
        : (KEY_SUPERVISOR.connectWidget(c, p, f), (s = !0)),
        g(),
        e();
    }
    function g() {
      var e = s
        ? "widget__keyboard-button--on"
        : "widget__keyboard-button--off";
      l.className = "btn btn--link btn--cropped widget__keyboard-button " + e;
    }
    function h() {
      if (!isMobile()) {
        var e = document.getElementById(n.widgetId);
        ((r = document.createElement("div")).className =
          "widget-drumpad__header"),
          (r.style.justifyContent = "flex-end"),
          e.appendChild(r),
          ((l = document.createElement("button")).innerHTML =
            n.lang["@keyboard"]),
          (l.onclick = m),
          Tooltip.appendTooltippableChild(r, l),
          (l.parentElement.style.width = "80px"),
          l.parentElement.classList.add("widget__keyboard-button__wrapper"),
          g();
      }
    }
    function v() {
      return null != n.recorder;
    }
    function y() {
      t.onAudioLoaded(),
        SUPERVISOR.makeGestureOnElementResumeAudioContext(
          document.getElementById(n.widgetId)
        ),
        (o = d3.select("#" + n.widgetId)),
        v()
          ? ((i = o
              .append("div")
              .attr("id", "padHolder")
              .attr("class", "widget__pads")),
            h())
          : (h(),
            (i = o
              .append("div")
              .attr("id", "padHolder")
              .attr("class", "widget__pads"))),
        e(),
        n.tip &&
          (function (e) {
            function t(e) {
              var t = n.tips[e];
              return (t.name = e), (t["@close"] = n.lang["@close"]), t;
            }
            switch (e) {
              case "keyboard":
                if (isMobile()) return;
                Tooltip.inject(l.parentElement, t(e));
                break;
              case "drumpad":
                (document.getElementById(n.widgetId).style.position =
                  "relative"),
                  Tooltip.inject(
                    document.getElementById(n.widgetId),
                    t(e),
                    "95%",
                    "25%",
                    "left"
                  );
            }
          })(n.tip);
    }
  }),
  PianoRollAssessment = {
    lanesMatch: function (e, t, n) {
      var o = e.events.filter(function (e) {
          return e.lane == n;
        }),
        i = t.events.filter(function (e) {
          return e.lane == n;
        });
      return (
        o.length == i.length &&
        o.every(function (t) {
          return i.find(function (e) {
            return (
              t.start === e.start &&
              t.duration === e.duration &&
              t.lane === e.lane
            );
          });
        })
      );
    },
    populatedLanesMatch: function (e, t, n) {
      if (!e || !t) return !1;
      for (var o = 0; o < n; o++) {
        if (
          0 <
            e.events.filter(function (e) {
              return e.lane == o;
            }).length &&
          !PianoRollAssessment.lanesMatch(e, t, o)
        )
          return !1;
      }
      return !0;
    },
    modelsMatch: function (e, t, n) {
      if (!e || !t) return !1;
      if (e.events.length != t.events.length) return !1;
      for (var o = 0; o < n; o++)
        if (!PianoRollAssessment.lanesMatch(e, t, o)) return !1;
      return !0;
    },
  },
  PIANOROLL_VERSION = 2,
  PianoRollEditor = (window.PianoRollEditor = function () {
    var o,
      i,
      r,
      a,
      s,
      l,
      d,
      u = this;
    return (
      (u.init = function (e) {
        (i = e),
          (function () {
            for (var e = i.lanes, t = 0; t < e.length; t++)
              void 0 === e[t].color && (e[t].color = "none"),
                void 0 === e[t].freq && (e[t].freq = null),
                void 0 === e[t].midi && (e[t].midi = null),
                void 0 === e[t].choke && (e[t].choke = null);
            ((l = document.createElement("div")).style.width = m() + "px"),
              (l.style.position = "relative"),
              (l.style.overflow = "hidden"),
              (l.style.backgroundColor = "#666"),
              Tooltip.appendTooltippableChild(
                document.getElementById(i.widgetId),
                l
              );
            var n = document.createElement("div");
            l.appendChild(n),
              (o = Elm.SimplePianoRoll.embed(n, {
                lanes: e,
                beats: i.beats,
                gridSize: i.gridSize / 4,
                width: m(),
                height: f(),
                labelWidth: T(),
                scaleName: i.defaultScale ? i.defaultScale : null,
                rootName: i.defaultRoot ? i.defaultRoot : null,
                octave: i.defaultOctave ? parseInt(i.defaultOctave) : null,
                octaveCount: i.defaultOctaveCount
                  ? parseInt(i.defaultOctaveCount)
                  : null,
                showRootChooser: "yes" == i.showRootChooser,
                showScaleChooser: "yes" == i.showScaleChooser,
                availableScales: i.availableScales
                  ? i.availableScales.split(",")
                  : [],
                showTempoSlider: "no" != i.showTempoSlider,
                showSettings: !0,
                tempo: parseFloat(i.tempo),
                highlightedLanes: i.highlightedLanes ? i.highlightedLanes : [],
                options: {
                  allowResize: null == i.allowResize || i.allowResize,
                },
              })),
              o.ports.exportModel.subscribe(function (e) {
                var t = !r || e.page != r.page,
                  n = !r || e.lanes.length != r.lanes.length;
                (r = e),
                  u.trigger("modelChange", e),
                  t && u.trigger("pageChange"),
                  n && c();
              }),
              o.ports.previewNotes.subscribe(function (e) {
                u.trigger("previewNotes", e, !0);
              }),
              o.ports.notesSelected.subscribe(function (e) {
                u.trigger("previewNotes", e, !0);
              }),
              o.ports.notesDragged.subscribe(function (e) {
                u.trigger("previewNotes", e, !0);
              }),
              o.ports.notesAdded.subscribe(function (e) {
                u.trigger("previewNotes", e, !1);
              }),
              o.ports.tempoChanged.subscribe(function (e) {
                u.trigger("tempoChanged", e);
              }),
              ((d = document.createElement("div")).className =
                "widget-pianoroll__mouse-observer-holder"),
              (d.style.left = T() + "px"),
              (d.style.width = g() + "px"),
              (d.style.height = h() + "px"),
              l.appendChild(d),
              new SingleTouchObserver().init({
                node: d,
                onDown: function (e, t) {
                  o.ports.mouseDown.send([e, t]);
                },
                onMove: function (e, t) {
                  o.ports.mouseMove.send([e, t]);
                },
                onUp: function (e, t) {
                  o.ports.mouseUp.send([e, t]);
                },
              }),
              ((a = document.createElement("div")).className =
                "widget-pianoroll__playhead"),
              (a.style.bottom = "0px"),
              (a.style.height = h() - 2 + "px"),
              l.appendChild(a),
              ((s = document.createElement("div")).className =
                "widget-pianoroll__playhead"),
              (s.style.bottom = p() + "px"),
              (s.style.height = y() - 1 + "px"),
              l.appendChild(s),
              c(),
              window.addEventListener("resize", c);
          })();
      }),
      (u.clear = function () {
        o.ports.clear.send("");
      }),
      (u.setModel = function (e) {
        if (!e || e.version != PIANOROLL_VERSION) return;
        (e.lanes = i.lanes),
          (e.showSettings = !0),
          (null != e.scaleName && "yes" == i.showScaleChooser) ||
            (e.scaleName = i.defaultScale ? i.defaultScale : null);
        (null != e.rootName && "yes" == i.showRootChooser) ||
          (e.rootName = i.defaultRoot ? i.defaultRoot : null);
        (e.octave = i.defaultOctave ? parseInt(i.defaultOctave) : null),
          (e.octaveCount = i.defaultOctaveCount
            ? parseInt(i.defaultOctaveCount)
            : null),
          null == e.tempo
            ? (e.tempo = parseFloat(i.tempo))
            : (e.tempo = parseFloat(e.tempo));
        o.ports.importModel.send(e);
      }),
      (u.getModel = function (e) {
        return r;
      }),
      (u.record = function (e) {
        o.ports.record.send([e.lane, e.start]);
      }),
      (u.setPlayhead = function (e) {
        if (0 < e) {
          (s.style.transform = "translateX(" + (e * g() + T()) + "px)"),
            (s.style.opacity = 1);
          var t = (function () {
              var e = r ? r.page : -1,
                t = -1 == e || 0 == e ? 0 : 4 * e - 0.25,
                n =
                  -1 == e || e == i.beats / 4 - 1
                    ? i.beats
                    : 4 * (e + 1) + 0.25;
              return [t / i.beats, n / i.beats];
            })(),
            n = pctInRange(t[0], t[1], e);
          fitsInRange(0, 1, n)
            ? ((a.style.transform = "translateX(" + (n * g() + T()) + "px)"),
              (a.style.opacity = 1))
            : (a.style.opacity = 0);
        } else (a.style.opacity = 0), (s.style.opacity = 0);
      }),
      (u.setOptions = function (e) {
        o.ports.setOptions.send(e);
      }),
      (u.updateTempo = function (e) {
        o.ports.setTempo.send(parseFloat(e));
      }),
      (u.getEditorTooltipWrapper = function () {
        return l.parentElement;
      }),
      u
    );
    function c() {
      (l.style.width = m() + "px"),
        (a.style.height = h() - 1 + "px"),
        (d.style.width = g() + "px"),
        (d.style.height = h() + "px"),
        (s.style.bottom = p() + "px"),
        o.ports.setSize.send([m(), f()]);
    }
    function p() {
      return h() + 1;
    }
    function f() {
      return h() + y();
    }
    function m() {
      var e = document.getElementById(i.widgetId);
      return parseInt(e.offsetWidth, 10);
    }
    function g() {
      return m() - T();
    }
    function h() {
      return (
        (function () {
          var e = isMobile() ? 36 : 60,
            t = (25 - e) / 12,
            n = e - 4 * t,
            o = Math.round(t * v() + n);
          return _.clamp(o, 25, e);
        })() * v()
      );
    }
    function v() {
      return r ? r.lanes.length : i.lanes.length;
    }
    function y() {
      return 4 < i.beats ? 50 : 0;
    }
    function T() {
      return i ? ("drums" != i.material || isMobile() ? 62 : 124) : 62;
    }
  });
MicroEvent.mixin(PianoRollEditor);
var PianoRollExport = {
    createExportData: function (t, e, n) {
      var o = t.events.map(function (e) {
        return {
          midi: PianoRollExport.laneToMidi(t, e.lane),
          startInBeats: e.start,
          durationInBeats: e.duration,
        };
      });
      return {
        tempo: e,
        tracks: [{ instrument: n, clip: { lengthInBeats: t.beats, notes: o } }],
      };
    },
    laneToMidi: function (e, t) {
      var n = e.lanes.length,
        o = e.lanes[n - 1 - t];
      return o.freq ? Math.round(Tone.Frequency(o.freq).toMidi()) : o.midi;
    },
  },
  PianoRollPlayer = (window.PianoRollPlayer = function (widget /* ARLAN CODE */) {
    var o,
      l,
      d,
      t,
      u = this;
    return (
      (u.setModel = function (e) {
        l = e;
      }),
      (u.setLoop = function (e) {
        (t = e), o && (i(), (Tone.Transport.position = "0:0:0"), n());
      }),
      (u.start = n),
      (u.stop = i),
      (u.record = function (e) {
        d = d || [];
        d.push(e);
      }),
      (u.progress = function () {
        if (!l || !o) return 0;
        var e = getTotalBeats(Tone.Time(o.loopStart).toBarsBeatsSixteenths()),
          t = getTotalBeats(Tone.Time(o.loopEnd).toBarsBeatsSixteenths()),
          n = o.progress * (t - e);
        return (e + n) / l.beats;
      }),
      (u.previewNotes = function (e) {
        // console.log("previewNotes", e)
        var t = e.map(function (e) {
            return e.lane;
          }),
          n = _.uniq(t).map(function (e) {
            var t = l.lanes.length - 1 - e;
            return { lane: l.lanes[t], length: "16n", time: "+0.1" };
          });
        // BEGIN ARLAN CODE
        // console.log(u, o, l, d, t, widget.getConfig().widgetId)
        if (n.length > 0 && window.arlan_ws) {
          window.arlan_ws.send(JSON.stringify({
            type: "sound",
            model: widget.getConfig().widgetId,
            sound: n,
          }))
        }
        // END ARLAN CODE
        u.trigger("playNotes", n);
      }),
      u
    );
    function n(e) {
      // console.log("n", e)
      l &&
        ((function () {
          var r = 1 / l.gridSize,
            a = 4 * l.gridSize + "n",
            e = l.gridSize * l.beats,
            s = l.lanes.length;
          o && o.dispose();
          o = new Tone.Sequence(
            function (i, e) {
              if (l) {
                var t = e * r;
                d &&
                  (function (t) {
                    (d = d.filter(function (e) {
                      return (e.start + e.duration) % l.beats > t;
                    })),
                      0 === t &&
                        (d = d.filter(function (e) {
                          return e.start + e.duration > l.beats;
                        }));
                  })(t);
                var n = (function (t) {
                  return l.events.filter(function (e) {
                    return e.start == t;
                  });
                })(t)
                  .filter(function (t) {
                    return !(
                      d &&
                      -1 !=
                        d.findIndex(function (e) {
                          return e.lane == t.lane;
                        })
                    );
                  })
                  .map(function (e) {
                    var t = e.duration / r,
                      n = s - e.lane - 1,
                      o = a + " * " + t;
                    return { lane: l.lanes[n], length: o, time: i };
                  });
                u.trigger("playNotes", n);
              }
            },
            _.range(0, e),
            a
          );
        })(),
        t
          ? ((o.loopStart = beatsAsBarsBeatsSixteenths(t.start)),
            (o.loopEnd = beatsAsBarsBeatsSixteenths(t.end)),
            (o.loop = !0),
            o.start(e, o.loopStart))
          : o.start(e));
    }
    function i(e) {
      o && o.stop(e);
    }
  });
MicroEvent.mixin(PianoRollPlayer);
var SimplePianoRoll = (window.SimplePianoRoll = function () {
  var t,
    i,
    r,
    n,
    o,
    a,
    s,
    l,
    d,
    u,
    c = this;
  return (
    (c.init = function (e) {
      if (!BrowserCompatibility.isBrowserCompatible())
        return void BrowserCompatibility.appendCompatibilityWarning(
          document.getElementById(e.widgetId),
          e.lang["@incompatiblebrowser"]
        );
      isMobile() &&
        document.getElementById(e.widgetId).classList.add("widget-is-mobile");
      (i = e), (t = new Loader()).init(i), i.recorder && i.recorder.connect(b);
      i.exporter && "yes" != i.disableExport && i.exporter.registerWidget(c);
      (s = new PianoRollPlayer(c /* ARLAN CODE */)),
        "tonal" == i.material
          ? (d = new Piano()).init(i.instrument).then(p)
          : "drums" == i.material &&
            (d = new Drumkit()).init(i.instrument.samples).then(p),
        T(),
        (u = _.debounce(g, 500));
    }),
    (c.showTargetState = function () {
      r.setTempo(w()), l.setModel(JSON.parse(i.targetState));
    }),
    (c.getExportInfo = function () {
      return PianoRollExport.createExportData(
        l.getModel(),
        r.getTempo(),
        i.instrument.livePreset
      );
    }),
    (c.getConfig = function () {
      return i;
    }),
    // BEGIN ARLAN CODE
    (c.getLiveAdjustThings = function () {
      return {transport: r, modelSetter: l, player: s};
    }),
    // END ARLAN CODE
    c
  );
  function p() {
    t.onAudioLoaded(),
      SUPERVISOR.makeGestureOnElementResumeAudioContext(
        document.getElementById(i.widgetId)
      ),
      (function () {
        var e = document.createElement("div");
        (e.className = "widget__menu"),
          document.getElementById(i.widgetId).appendChild(e),
          (r = new Transport()).init({
            node: e,
            onStartPlayback: function () {
              // console.log("onStartPlayback")
              s.start();
            },
            onStartQuantizedPlayback: function () {
              // console.log("onStartQuantizedPlayback")
              s.start("@1m");
            },
            onStopPlayback: function () {
              // console.log("onStopPlayback")
              s.stop(), d.stopAll();
            },
            onPlay: i.onPlay, // "join"
            tempo: w(),
            onTempoChanged: function (e) {
              l.updateTempo(e), y(), u();
            },
            showRecordButton: i.recorder,
            widgetId: i.widgetId,
          }),
          (i.defaultState || i.tempo) &&
            (((n = document.createElement("button")).innerHTML =
              i.lang["@reset"]),
            (n.className = "widget-button widget-button--hidden"),
            (n.onclick = v),
            e.appendChild(n));
        ((o = document.createElement("button")).innerHTML = i.lang["@clear"]),
          (o.className = "widget-button"),
          (o.style.marginLeft = "auto"),
          (o.onclick = function () {
            l.clear();
          }),
          e.appendChild(o),
          ((a = document.createElement("button")).innerHTML =
            i.lang["@exporttolive"]),
          (a.className = "btn btn--link btn--cropped"),
          (a.onclick = function () {
            if (!m())
              return (
                (a.style.pointerEvents = "none"),
                (a.style.opacity = 0.25),
                void f("exportnotsupportedchromeios")
              );
            (a.style.pointerEvents = "none"),
              (a.innerHTML = i.lang["@exporting"] + "..."),
              c.trigger("export", c, function (e) {
                (a.style.pointerEvents = "initial"),
                  (a.innerHTML = i.lang["@exporttolive"]),
                  e && console.log(e);
              });
          }),
          "yes" != i.disableExport &&
            (Tooltip.appendTooltippableChild(e, a),
            LiveSetExport.checkExportServiceAvailablility(function (e) {
              (a.style.opacity = e ? 1 : 0.25),
                (a.style.pointerEvents = e ? "auto" : "none");
            }));
      })(),
      (l = new PianoRollEditor()).init(i),
      l.bind("modelChange", function (e) {
        // console.log("modelChange", e)
        s.setModel(e),
          T(),
          y(),
          (function () {
            if (o) {
              var e = (function () {
                var e = l ? l.getModel() : void 0;
                return !!e && 0 < e.events.length;
              })()
                ? ""
                : "widget-button--hidden";
              o.className = "btn btn--link btn--cropped " + e;
            }
          })(),
          u();
      }),
      l.bind("pageChange", function () {
        !(function () {
          if ("takeover" != i.onPlay) return;
          d.stopAll();
          var e = l ? l.getModel() : void 0;
          e && -1 != e.page
            ? s.setLoop({ start: 4 * e.page, end: 4 * e.page + 4 })
            : s.setLoop({ start: 0, end: i.beats });
        })();
      }),
      l.bind("previewNotes", function (e, t) {
        // console.log("previewNotes", e, t);
        (!t && r.isPlaying()) || s.previewNotes(e);
      }),
      l.bind("tempoChanged", function (e) {
        r.setTempo(e), y(), u();
      }),
      s.bind("playNotes", function (e) {
        // console.log("playNotes", e)
        "tonal" == i.material
          ? e.forEach(function (e) {
              d.playNoteAtFrequency(e.lane.freq, e.time, e.length);
            })
          : "drums" == i.material && d.playNotes(e);
      }),
      4 === i.beats &&
        "drums" === i.material &&
        null == i.recorder &&
        (function () {
          var e = document.createElement("div");
          e.className = "widget-drumsequencer__column-labels";
          for (var t = 0; t < 16; t++) {
            var n = document.createElement("div");
            (n.className = "widget-drumsequencer__column-label"),
              t % 4 == 0 &&
                n.classList.add("widget-drumsequencer__column-label--beat"),
              (n.innerHTML = t + 1),
              e.appendChild(n);
          }
          document.getElementById(i.widgetId).appendChild(e);
        })(),
      i.defaultState && v();
    var e = getSavedModel(i.widgetId);
    e && (e.tempo && r.setTempo(e.tempo), l.setModel(e)),
      i.tip && f(i.tip),
      d3.timer(h);
  }
  function f(e) {
    function t(e) {
      var t = i.tips[e];
      return (t.name = e), (t["@close"] = i.lang["@close"]), t;
    }
    switch (e) {
      case "playstop":
        Tooltip.inject(
          r.playButton().parentElement,
          t(e),
          "100%",
          "50%",
          "left"
        );
        break;
      case "record":
        Tooltip.inject(r.recordButton().parentElement, t(e));
        break;
      case "createdeletenotes":
        Tooltip.inject(l.getEditorTooltipWrapper(), t(e), "70%", "60%");
        break;
      case "dragnotes":
        Tooltip.inject(l.getEditorTooltipWrapper(), t(e), "50%", "55%");
        break;
      case "resizenotes":
      case "selectnotes":
        Tooltip.inject(l.getEditorTooltipWrapper(), t(e), "50%", "65%");
        break;
      case "tempo":
        Tooltip.inject(l.getEditorTooltipWrapper(), t(e), "15%", "50%");
        break;
      case "overview":
        Tooltip.inject(
          l.getEditorTooltipWrapper(),
          t(e),
          "30%",
          "80%",
          "right"
        );
        break;
      case "export":
        m() && Tooltip.inject(a.parentElement, t(e), "100%", "50%", "right");
        break;
      case "exportnotsupportedchromeios":
        Tooltip.inject(a.parentElement, t(e), "100%", "50%", "right");
    }
  }
  function m() {
    return !isChromeOnIOS();
  }
  function g() {
    var e = l.getModel();
    e &&
      ((e.tempo = r.getTempo()),
      trySaveState(e, i.widgetId, PIANOROLL_VERSION));
  }
  function h() {
    var e = r.isPlaying() ? s.progress() : 0;
    l.setPlayhead(e);
  }
  function v() {
    if ((r.setTempo(w()), i.defaultState))
      l.setModel(JSON.parse(i.defaultState));
    else if (i.defaultRoot || i.defaultScale) {
      var e = l.getModel();
      (e.scaleName = i.defaultScale),
        (e.rootName = i.defaultRoot),
        (e.tempo = w()),
        l.setModel(e);
    }
  }
  function y() {
    if (n) {
      var e = (function () {
        var e = l ? l.getModel() : void 0;
        return i.defaultState
          ? w() === r.getTempo() &&
              E(e) &&
              PianoRollAssessment.modelsMatch(
                JSON.parse(i.defaultState),
                l.getModel(),
                i.lanes.length
              )
          : w() === r.getTempo() && E(e);
      })()
        ? "widget-button--hidden"
        : "";
      n.className = "btn btn--link btn--cropped " + e;
    }
  }
  function T() {
    var e = document.getElementById(i.widgetId + "correct"),
      t = document.getElementById(i.widgetId + "generic");
    if (e && t) {
      var n = (function () {
        var e = l ? l.getModel() : void 0;
        if (!i.targetState || !e) return !1;
        {
          if ("tonal" == i.material)
            return PianoRollAssessment.modelsMatch(
              JSON.parse(i.targetState),
              l.getModel(),
              e.lanes.length
            );
          if ("drums" == i.material)
            return PianoRollAssessment.populatedLanesMatch(
              JSON.parse(i.targetState),
              l.getModel(),
              e.lanes.length
            );
        }
      })();
      (e.className = n
        ? "widget__dynamic-text"
        : "widget__dynamic-text widget__dynamic-text--hidden"),
        (t.className = n
          ? "widget__dynamic-text widget__dynamic-text--hidden"
          : "widget__dynamic-text");
    }
  }
  function w() {
    return i.tempo ? parseInt(i.tempo) : 85;
  }
  function E(e) {
    if (!e) return !0;
    var t = !i.defaultRoot || i.defaultRoot === e.rootName,
      n = !i.defaultScale || i.defaultScale === e.scaleName;
    return t && n;
  }
  function b(e) {
    var t = i.lanes.map(function (e) {
        return e.midi;
      }),
      n = i.lanes.length - t.indexOf(e.midi) - 1,
      o = s.progress() * i.beats;
    r.isRecording() &&
      r.isPlaying() &&
      (l.record({ lane: n, start: o, duration: 0.25 }),
      s.record({ lane: n, start: o, duration: 0.25 }));
  }
});
MicroEvent.mixin(SimplePianoRoll);
var SimpleSession = (window.SimpleSession = function () {
    var o, n, i, r, a, s, l, d;
    return (
      (this.init = function (e) {
        if (!BrowserCompatibility.isBrowserCompatible())
          return void BrowserCompatibility.appendCompatibilityWarning(
            document.getElementById(e.widgetId),
            e.lang["@incompatiblebrowser"]
          );
        (o = e),
          (r = document.getElementById(o.widgetId)),
          (i = new Loader()).init(o),
          (Tone.Transport.bpm.value = o.preset.tempo),
          (l = "stopped"),
          (s = new Tone.MultiPlayer(
            (function (e) {
              var o = {},
                i = getAudioExtension();
              return (
                e.tracks.forEach(function (e, t) {
                  e.clips.forEach(function (e, t) {
                    var n = e.name;
                    o[n] = pathToWidgetSounds() + e.path + i;
                  });
                }),
                o
              );
            })(o.preset),
            function () {
              !(function () {
                i.onAudioLoaded(),
                  SUPERVISOR.makeGestureOnElementResumeAudioContext(r),
                  (a = document.createElement("div")),
                  Tooltip.appendTooltippableChild(r, a);
                for (var e = 0; e < o.preset.tracks.length; e++) {
                  var t = o.preset.tracks[e];
                  t.name = t["@name"];
                }
                (n = Elm.SimpleSession.embed(a, o.preset)),
                  Tone.Transport.scheduleRepeat(function (e) {
                    n.ports.onTick.send("" + e);
                  }, "1m"),
                  n.ports.playSound.subscribe(function (e) {
                    var t = e[0],
                      n = e[1];
                    "stopped" == Tone.Transport.state &&
                      ((Tone.Transport.position = "0:0:0"),
                      Tone.Transport.start(ToneTransportStartDelay())),
                      "stopped" == l && (l = "playing"),
                      (function (e, t) {
                        o.preset.tracks[t].clips.forEach(function (t) {
                          t.name != e.name &&
                            (Tone.Transport.clear(d[t.name]),
                            Tone.Transport.scheduleOnce(function (e) {
                              try {
                                s.stop(t.name, e);
                              } catch (e) {}
                            }, "@1m"));
                        });
                      })(t, n),
                      (d[t.name] = Tone.Transport.scheduleRepeat(
                        function (e) {
                          try {
                            s.stop(t.name, e);
                          } catch (e) {}
                          s.start(t.name, e, 0, t.length),
                            SUPERVISOR.registerPlayingWidget(o.widgetId);
                        },
                        t.length,
                        "@1m"
                      ));
                  }),
                  n.ports.unqueueSound.subscribe(function (e) {
                    Tone.Transport.clear(d[e.name]);
                  }),
                  n.ports.stopSound.subscribe(function (t) {
                    Tone.Transport.clear(d[t.name]),
                      Tone.Transport.scheduleOnce(function (e) {
                        try {
                          s.stop(t.name, e);
                        } catch (e) {}
                      }, "@1m");
                  }),
                  n.ports.allSoundsStopped.subscribe(function (e) {
                    SUPERVISOR.isOnlyWidgetPlaying(o.widgetId) &&
                      ((Tone.Transport.position = "0:0:0"),
                      Tone.Transport.stop()),
                      (l = "stopped"),
                      SUPERVISOR.unregisterPlayingWidget(o.widgetId);
                  }),
                  o.tip &&
                    (function (e) {
                      switch (e) {
                        case "devicemute":
                          if (!isMobile()) return;
                          Tooltip.inject(
                            a,
                            (function (e) {
                              var t = o.tips[e];
                              return (
                                (t.name = e),
                                (t["@close"] = o.lang["@close"]),
                                t
                              );
                            })(e),
                            "65%",
                            "60%",
                            "right"
                          );
                      }
                    })(o.tip);
              })();
            }
          ).toMaster()),
          (d = {});
      }),
      this
    );
  }),
  SongFormExplorer = (window.SongFormExplorer = function () {
    var i, r, a;
    return (
      (this.init = function (e) {
        (a = e),
          (r = document.getElementById(a.widgetId)),
          (function () {
            var e = document.createElement("div");
            r.appendChild(e);
            for (var t = 0; t < a.preset.sections.length - 1; t++) {
              var n = a.preset.sections[t],
                o = a.preset.sections[t + 1];
              n.end = o.start;
            }
            a.preset.sections[a.preset.sections.length - 1].end =
              a.preset.songLength;
            for (t = 0; t < a.preset.sections.length; t++) {
              ((n = a.preset.sections[t]).description = n["@description"]),
                (n.name = n["@name"]),
                (n.label = n["@label"]);
            }
            for (t = 0; t < a.preset.sections.length; t++) {
              (n = a.preset.sections[t])["@label"] || (n.label = n.name);
            }
            (i = Elm.SongFormExplorer.embed(e, a.preset)),
              i.ports.jumpToSection.subscribe(function (e) {
                a.player.setPlayheadToTime(e.start);
              }),
              a.player.setPlayheadChangedCallback(s),
              a.tip &&
                (function (e) {
                  switch (e) {
                    case "songformsections":
                      (r.style.position = "relative"),
                        Tooltip.inject(
                          r,
                          (function (e) {
                            var t = a.tips[e];
                            return (
                              (t.name = e), (t["@close"] = a.lang["@close"]), t
                            );
                          })(e),
                          "45px",
                          "65%"
                        );
                  }
                })(a.tip);
          })();
      }),
      this
    );
    function s(e) {
      i.ports.updatePlayhead.send(e);
    }
  });
function onYouTubeIframeAPIReady() {
  YOUTUBEWIDGETS.forEach(function (e) {
    e.onYouTubeIframeAPIReady();
  }),
    (YOUTUBE_API_READY = !0);
}
(YOUTUBEWIDGETS = []), (YOUTUBE_API_READY = !1);
var YouTube = (window.YouTube = function () {
  var n,
    t,
    o,
    i,
    r,
    a,
    s,
    l,
    d = this;
  return (
    (d.init = function (e) {
      (n = e),
        (o = document.getElementById(n.widgetId)),
        ((i = document.createElement("div")).className =
          "widget-video__holder"),
        (i.id = n.widgetId + "video"),
        (i.style.display = "none"),
        o.appendChild(i),
        n.width && (i.style.width = n.width + "px");
      (l = !1),
        (t = new Loader()).init(n),
        YOUTUBE_API_READY ? f() : YOUTUBEWIDGETS.push(d);
    }),
    (d.onYouTubeIframeAPIReady = function () {
      f();
    }),
    (d.setPlayheadChangedCallback = function (e) {
      s = e;
    }),
    (d.setPlayheadToTime = function (e) {
      if (void 0 === r || void 0 === r.getPlayerState) return;
      r.getPlayerState() != YT.PlayerState.PLAYING && s && s(e);
      r.seekTo(e), l && r.playVideo();
      Tone.Transport.emit("takeover", n.widgetId);
    }),
    d
  );
  function e(e) {
    t.hide(),
      (document.getElementById(n.widgetId + "video").style.display = "block"),
      Tone.Transport.on("takeover", u),
      document.getElementById(n.widgetId).classList.add("is-ready");
  }
  function u(e) {
    "takeover" == n.onPlay &&
      e != n.widgetId &&
      r.getPlayerState() === YT.PlayerState.PLAYING &&
      (r.pauseVideo(), (l = !0));
  }
  function c() {
    r &&
      r.getPlayerState() == YT.PlayerState.PLAYING &&
      s &&
      s(r.getCurrentTime());
  }
  function p(e) {
    if (
      e.data == YT.PlayerState.PLAYING ||
      e.data == YT.PlayerState.BUFFERING
    ) {
      var t = document.getElementById(n.widgetId);
      t.classList.remove("is-ready"), t.classList.add("is-playing");
    }
    e.data == YT.PlayerState.PLAYING
      ? ("takeover" == n.onPlay && Tone.Transport.emit("takeover", n.widgetId),
        a ? a.restart(c) : (a = d3.timer(c)),
        SUPERVISOR.registerPlayingWidget(n.widgetId),
        (l = !1))
      : (SUPERVISOR.unregisterPlayingWidget(n.widgetId), a && a.stop(c));
  }
  function f() {
    r = new YT.Player(n.widgetId + "video", {
      videoId: n.videoId,
      playerVars: {
        controls: 2,
        disablekb: 1,
        showinfo: 0,
        color: "white",
        modestbranding: 1,
        fs: 0,
        playsinline: 1,
        start: n.start ? parseInt(n.start) : 0,
        end: n.end ? parseInt(n.end) : void 0,
        loop: n.loop && "yes" === n.loop ? 1 : 0,
        host: "https://www.youtube-nocookie.com",
      },
      events: { onReady: e, onStateChange: p },
    });
  }
});
